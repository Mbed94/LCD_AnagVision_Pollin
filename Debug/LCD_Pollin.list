
LCD_Pollin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004024  08004024  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800402c  0800402c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08004040  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004040  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0d8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca3  00000000  00000000  0002c10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  0002ddb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  0002eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017403  00000000  00000000  0002f738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a9c1  00000000  00000000  00046b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096809  00000000  00000000  000514fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7d05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa0  00000000  00000000  000e7d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f80 	.word	0x08003f80

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003f80 	.word	0x08003f80

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	0002      	movs	r2, r0
 8000610:	1dbb      	adds	r3, r7, #6
 8000612:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <delay+0x2c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <delay+0x2c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000624:	1dbb      	adds	r3, r7, #6
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	d3f8      	bcc.n	800061e <delay+0x16>
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028

08000638 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	0002      	movs	r2, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4824      	ldr	r0, [pc, #144]	; (80006dc <send_to_lcd+0xa4>)
 800064c:	001a      	movs	r2, r3
 800064e:	2102      	movs	r1, #2
 8000650:	f000 fe96 	bl	8001380 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000654:	1dfb      	adds	r3, r7, #7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2201      	movs	r2, #1
 800065e:	4013      	ands	r3, r2
 8000660:	b2db      	uxtb	r3, r3
 8000662:	481e      	ldr	r0, [pc, #120]	; (80006dc <send_to_lcd+0xa4>)
 8000664:	001a      	movs	r2, r3
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	f000 fe8a 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	089b      	lsrs	r3, r3, #2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2201      	movs	r2, #1
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4818      	ldr	r0, [pc, #96]	; (80006dc <send_to_lcd+0xa4>)
 800067c:	001a      	movs	r2, r3
 800067e:	2140      	movs	r1, #64	; 0x40
 8000680:	f000 fe7e 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2201      	movs	r2, #1
 800068e:	4013      	ands	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4812      	ldr	r0, [pc, #72]	; (80006dc <send_to_lcd+0xa4>)
 8000694:	001a      	movs	r2, r3
 8000696:	2120      	movs	r1, #32
 8000698:	f000 fe72 	bl	8001380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2201      	movs	r2, #1
 80006a2:	4013      	ands	r3, r2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <send_to_lcd+0xa4>)
 80006a8:	001a      	movs	r2, r3
 80006aa:	2110      	movs	r1, #16
 80006ac:	f000 fe68 	bl	8001380 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <send_to_lcd+0xa4>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	2108      	movs	r1, #8
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fe62 	bl	8001380 <HAL_GPIO_WritePin>
	delay (20);
 80006bc:	2014      	movs	r0, #20
 80006be:	f7ff ffa3 	bl	8000608 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <send_to_lcd+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	2108      	movs	r1, #8
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fe59 	bl	8001380 <HAL_GPIO_WritePin>
	delay (20);
 80006ce:	2014      	movs	r0, #20
 80006d0:	f7ff ff9a 	bl	8000608 <delay>
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	50000400 	.word	0x50000400

080006e0 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80006ec:	200f      	movs	r0, #15
 80006ee:	183b      	adds	r3, r7, r0
 80006f0:	1dfa      	adds	r2, r7, #7
 80006f2:	7812      	ldrb	r2, [r2, #0]
 80006f4:	0912      	lsrs	r2, r2, #4
 80006f6:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80006f8:	0004      	movs	r4, r0
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2100      	movs	r1, #0
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff ff99 	bl	8000638 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000706:	0020      	movs	r0, r4
 8000708:	183b      	adds	r3, r7, r0
 800070a:	1dfa      	adds	r2, r7, #7
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	210f      	movs	r1, #15
 8000710:	400a      	ands	r2, r1
 8000712:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 8000714:	183b      	adds	r3, r7, r0
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2100      	movs	r1, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f7ff ff8c 	bl	8000638 <send_to_lcd>
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b005      	add	sp, #20
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000734:	200f      	movs	r0, #15
 8000736:	183b      	adds	r3, r7, r0
 8000738:	1dfa      	adds	r2, r7, #7
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	0912      	lsrs	r2, r2, #4
 800073e:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000740:	0004      	movs	r4, r0
 8000742:	183b      	adds	r3, r7, r0
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2101      	movs	r1, #1
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff ff75 	bl	8000638 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800074e:	0020      	movs	r0, r4
 8000750:	183b      	adds	r3, r7, r0
 8000752:	1dfa      	adds	r2, r7, #7
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	210f      	movs	r1, #15
 8000758:	400a      	ands	r2, r1
 800075a:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 800075c:	183b      	adds	r3, r7, r0
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2101      	movs	r1, #1
 8000762:	0018      	movs	r0, r3
 8000764:	f7ff ff68 	bl	8000638 <send_to_lcd>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b005      	add	sp, #20
 800076e:	bd90      	pop	{r4, r7, pc}

08000770 <lcd_clear>:

void lcd_clear (void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff ffb3 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(2);
 800077a:	2002      	movs	r0, #2
 800077c:	f000 fbc6 	bl	8000f0c <HAL_Delay>
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <lcd_put_cur+0x16>
 8000796:	2b01      	cmp	r3, #1
 8000798:	d005      	beq.n	80007a6 <lcd_put_cur+0x20>
 800079a:	e009      	b.n	80007b0 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	4313      	orrs	r3, r2
 80007a2:	603b      	str	r3, [r7, #0]
            break;
 80007a4:	e004      	b.n	80007b0 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	22c0      	movs	r2, #192	; 0xc0
 80007aa:	4313      	orrs	r3, r2
 80007ac:	603b      	str	r3, [r7, #0]
            break;
 80007ae:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	0018      	movs	r0, r3
 80007b6:	f7ff ff93 	bl	80006e0 <lcd_send_cmd>
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <lcd_init>:


void lcd_init (void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80007c6:	2032      	movs	r0, #50	; 0x32
 80007c8:	f000 fba0 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x30);
 80007cc:	2030      	movs	r0, #48	; 0x30
 80007ce:	f7ff ff87 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80007d2:	2005      	movs	r0, #5
 80007d4:	f000 fb9a 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x30);
 80007d8:	2030      	movs	r0, #48	; 0x30
 80007da:	f7ff ff81 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 fb94 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x30);
 80007e4:	2030      	movs	r0, #48	; 0x30
 80007e6:	f7ff ff7b 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 fb8e 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80007f0:	2020      	movs	r0, #32
 80007f2:	f7ff ff75 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(10);
 80007f6:	200a      	movs	r0, #10
 80007f8:	f000 fb88 	bl	8000f0c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80007fc:	2028      	movs	r0, #40	; 0x28
 80007fe:	f7ff ff6f 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 fb82 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000808:	2008      	movs	r0, #8
 800080a:	f7ff ff69 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(1);
 800080e:	2001      	movs	r0, #1
 8000810:	f000 fb7c 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff ff63 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fb76 	bl	8000f0c <HAL_Delay>
	HAL_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fb73 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000826:	2006      	movs	r0, #6
 8000828:	f7ff ff5a 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 fb6d 	bl	8000f0c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000832:	200c      	movs	r0, #12
 8000834:	f7ff ff54 	bl	80006e0 <lcd_send_cmd>
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000846:	e006      	b.n	8000856 <lcd_send_string+0x18>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff ff69 	bl	8000728 <lcd_send_data>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f4      	bne.n	8000848 <lcd_send_string+0xa>
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f000 faca 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f000 f834 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f000 f958 	bl	8000b28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000878:	f000 f908 	bl	8000a8c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800087c:	f000 f892 	bl	80009a4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <main+0x68>)
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fc94 	bl	80021b0 <HAL_TIM_Base_Start>

  lcd_init();
 8000888:	f7ff ff9b 	bl	80007c2 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  lcd_put_cur(0, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ff79 	bl	8000786 <lcd_put_cur>
	  lcd_send_string("Hallo");
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <main+0x6c>)
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff ffd1 	bl	800083e <lcd_send_string>
	  HAL_Delay(1000);
 800089c:	23fa      	movs	r3, #250	; 0xfa
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fb33 	bl	8000f0c <HAL_Delay>
	  lcd_put_cur(1, 0);
 80008a6:	2100      	movs	r1, #0
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff ff6c 	bl	8000786 <lcd_put_cur>
	  lcd_send_string("Das ist ein Test");
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <main+0x70>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ffc4 	bl	800083e <lcd_send_string>
	  HAL_Delay(1000);
 80008b6:	23fa      	movs	r3, #250	; 0xfa
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fb26 	bl	8000f0c <HAL_Delay>
	  lcd_clear();
 80008c0:	f7ff ff56 	bl	8000770 <lcd_clear>
	  HAL_Delay(1000);
 80008c4:	23fa      	movs	r3, #250	; 0xfa
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fb1f 	bl	8000f0c <HAL_Delay>
	  lcd_put_cur(0, 0);
 80008ce:	e7dd      	b.n	800088c <main+0x24>
 80008d0:	20000028 	.word	0x20000028
 80008d4:	08003f98 	.word	0x08003f98
 80008d8:	08003fa0 	.word	0x08003fa0

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b0a1      	sub	sp, #132	; 0x84
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	2448      	movs	r4, #72	; 0x48
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2338      	movs	r3, #56	; 0x38
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f003 fb3f 	bl	8003f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f2:	2338      	movs	r3, #56	; 0x38
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	0018      	movs	r0, r3
 80008f8:	2310      	movs	r3, #16
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f003 fb37 	bl	8003f70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	0018      	movs	r0, r3
 8000906:	2334      	movs	r3, #52	; 0x34
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f003 fb30 	bl	8003f70 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fd51 	bl	80013bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2202      	movs	r2, #2
 800091e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	0052      	lsls	r2, r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2240      	movs	r2, #64	; 0x40
 8000932:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fd89 	bl	8001454 <HAL_RCC_OscConfig>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000946:	f000 f965 	bl	8000c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	2138      	movs	r1, #56	; 0x38
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2207      	movs	r2, #7
 8000950:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2100      	movs	r1, #0
 8000968:	0018      	movs	r0, r3
 800096a:	f001 f893 	bl	8001a94 <HAL_RCC_ClockConfig>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000972:	f000 f94f 	bl	8000c14 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <SystemClock_Config+0xc4>)
 800097a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fa2c 	bl	8001de8 <HAL_RCCEx_PeriphCLKConfig>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000994:	f000 f93e 	bl	8000c14 <Error_Handler>
  }
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b021      	add	sp, #132	; 0x84
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	00200002 	.word	0x00200002

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	0018      	movs	r0, r3
 80009b0:	2310      	movs	r3, #16
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 fadb 	bl	8003f70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	2334      	movs	r3, #52	; 0x34
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	0018      	movs	r0, r3
 80009c0:	230c      	movs	r3, #12
 80009c2:	001a      	movs	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	f003 fad3 	bl	8003f70 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ca:	003b      	movs	r3, r7
 80009cc:	0018      	movs	r0, r3
 80009ce:	2334      	movs	r3, #52	; 0x34
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f003 facc 	bl	8003f70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_TIM1_Init+0xdc>)
 80009da:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <MX_TIM1_Init+0xe0>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <MX_TIM1_Init+0xdc>)
 80009e0:	2210      	movs	r2, #16
 80009e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_TIM1_Init+0xdc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_TIM1_Init+0xdc>)
 80009ec:	4a26      	ldr	r2, [pc, #152]	; (8000a88 <MX_TIM1_Init+0xe4>)
 80009ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <MX_TIM1_Init+0xdc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_TIM1_Init+0xdc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <MX_TIM1_Init+0xdc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_TIM1_Init+0xdc>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fba7 	bl	8002158 <HAL_TIM_Base_Init>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 f901 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	0152      	lsls	r2, r2, #5
 8000a1a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1c:	187a      	adds	r2, r7, r1
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_TIM1_Init+0xdc>)
 8000a20:	0011      	movs	r1, r2
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fbee 	bl	8002204 <HAL_TIM_ConfigClockSource>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 f8f2 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2134      	movs	r1, #52	; 0x34
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a44:	187a      	adds	r2, r7, r1
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_TIM1_Init+0xdc>)
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fdb6 	bl	80025bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000a54:	f000 f8de 	bl	8000c14 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a58:	003b      	movs	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a5e:	003b      	movs	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a64:	003a      	movs	r2, r7
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_TIM1_Init+0xdc>)
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f001 fdfc 	bl	8002668 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000a74:	f000 f8ce 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b014      	add	sp, #80	; 0x50
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000028 	.word	0x20000028
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	0000ffff 	.word	0x0000ffff

08000a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000a92:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <MX_USART2_UART_Init+0x98>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000a98:	22e1      	movs	r2, #225	; 0xe1
 8000a9a:	0252      	lsls	r2, r2, #9
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 fe6c 	bl	80027b4 <HAL_UART_Init>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ae0:	f000 f898 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f003 f931 	bl	8003d50 <HAL_UARTEx_SetTxFifoThreshold>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000af2:	f000 f88f 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000af8:	2100      	movs	r1, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f003 f968 	bl	8003dd0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b04:	f000 f886 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <MX_USART2_UART_Init+0x94>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f003 f8e6 	bl	8003cdc <HAL_UARTEx_DisableFifoMode>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f000 f87e 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000068 	.word	0x20000068
 8000b24:	40004400 	.word	0x40004400

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b08b      	sub	sp, #44	; 0x2c
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	2414      	movs	r4, #20
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	0018      	movs	r0, r3
 8000b34:	2314      	movs	r3, #20
 8000b36:	001a      	movs	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f003 fa19 	bl	8003f70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b42:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b44:	2104      	movs	r1, #4
 8000b46:	430a      	orrs	r2, r1
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
 8000b4a:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4e:	2204      	movs	r2, #4
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b66:	2220      	movs	r2, #32
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_GPIO_Init+0xe4>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	2202      	movs	r2, #2
 8000b98:	4013      	ands	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b9e:	23a0      	movs	r3, #160	; 0xa0
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 fbea 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_GPIO_Init+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	21fe      	movs	r1, #254	; 0xfe
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fbe4 	bl	8001380 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2220      	movs	r2, #32
 8000bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2202      	movs	r2, #2
 8000bce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	193a      	adds	r2, r7, r4
 8000bd2:	23a0      	movs	r3, #160	; 0xa0
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fa6d 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000bde:	0021      	movs	r1, r4
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	22fe      	movs	r2, #254	; 0xfe
 8000be4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2201      	movs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <MX_GPIO_Init+0xe8>)
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	0010      	movs	r0, r2
 8000c00:	f000 fa5a 	bl	80010b8 <HAL_GPIO_Init>

}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b00b      	add	sp, #44	; 0x2c
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	50000400 	.word	0x50000400

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <LL_SYSCFG_DisableDBATT+0x1c>)
 8000c2a:	6819      	ldr	r1, [r3, #0]
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <LL_SYSCFG_DisableDBATT+0x1c>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	430a      	orrs	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40010000 	.word	0x40010000

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	641a      	str	r2, [r3, #64]	; 0x40
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	0549      	lsls	r1, r1, #21
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	055b      	lsls	r3, r3, #21
 8000c74:	4013      	ands	r3, r2
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8000c7a:	23c0      	movs	r3, #192	; 0xc0
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff ffce 	bl	8000c20 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x38>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10d      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000ca8:	2180      	movs	r1, #128	; 0x80
 8000caa:	0109      	lsls	r1, r1, #4
 8000cac:	430a      	orrs	r2, r1
 8000cae:	641a      	str	r2, [r3, #64]	; 0x40
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40012c00 	.word	0x40012c00
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	2314      	movs	r3, #20
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2314      	movs	r3, #20
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f003 f944 	bl	8003f70 <memset>
  if(huart->Instance==USART2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0x8c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d130      	bne.n	8000d54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0289      	lsls	r1, r1, #10
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	029b      	lsls	r3, r3, #10
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d26:	2114      	movs	r1, #20
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2202      	movs	r2, #2
 8000d32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2201      	movs	r2, #1
 8000d38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2201      	movs	r2, #1
 8000d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	187a      	adds	r2, r7, r1
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f9b2 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b00a      	add	sp, #40	; 0x28
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40021000 	.word	0x40021000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f8a4 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <SystemInit+0x14>)
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	0512      	lsls	r2, r2, #20
 8000da2:	609a      	str	r2, [r3, #8]
#endif
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000db4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000db6:	e003      	b.n	8000dc0 <LoopCopyDataInit>

08000db8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000dba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000dbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dbe:	3104      	adds	r1, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dc0:	480b      	ldr	r0, [pc, #44]	; (8000df0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000dc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dc8:	d3f6      	bcc.n	8000db8 <CopyDataInit>
  ldr r2, =_sbss
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000dcc:	e002      	b.n	8000dd4 <LoopFillZerobss>

08000dce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  str  r3, [r2]
 8000dd0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd2:	3204      	adds	r2, #4

08000dd4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <LoopForever+0x16>)
  cmp r2, r3
 8000dd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dd8:	d3f9      	bcc.n	8000dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dda:	f7ff ffdd 	bl	8000d98 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dde:	f003 f8a3 	bl	8003f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff fd41 	bl	8000868 <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000dec:	08004034 	.word	0x08004034
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000df4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000df8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000dfc:	200000f8 	.word	0x200000f8

08000e00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_COMP_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_Init+0x3c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Init+0x3c>)
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	0049      	lsls	r1, r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f810 	bl	8000e44 <HAL_InitTick>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e001      	b.n	8000e34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff ff06 	bl	8000c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_InitTick+0x88>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d02b      	beq.n	8000eb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_InitTick+0x8c>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_InitTick+0x88>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	0019      	movs	r1, r3
 8000e66:	23fa      	movs	r3, #250	; 0xfa
 8000e68:	0098      	lsls	r0, r3, #2
 8000e6a:	f7ff f94b 	bl	8000104 <__udivsi3>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	0019      	movs	r1, r3
 8000e72:	0020      	movs	r0, r4
 8000e74:	f7ff f946 	bl	8000104 <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 f90f 	bl	800109e <HAL_SYSTICK_Config>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d112      	bne.n	8000eaa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d80a      	bhi.n	8000ea0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f8ee 	bl	8001074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_InitTick+0x90>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e00d      	b.n	8000ebc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e008      	b.n	8000ebc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e003      	b.n	8000ebc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
}
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b005      	add	sp, #20
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_IncTick+0x18>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	18d2      	adds	r2, r2, r3
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <HAL_IncTick+0x18>)
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000f4 	.word	0x200000f4
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	200000f4 	.word	0x200000f4

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff0 	bl	8000ef8 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3301      	adds	r3, #1
 8000f24:	d004      	beq.n	8000f30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_Delay+0x40>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	18d3      	adds	r3, r2, r3
 8000f2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	f7ff ffe1 	bl	8000ef8 <HAL_GetTick>
 8000f36:	0002      	movs	r2, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d8f7      	bhi.n	8000f32 <HAL_Delay+0x26>
  {
  }
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b004      	add	sp, #16
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	0002      	movs	r2, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b7f      	cmp	r3, #127	; 0x7f
 8000f64:	d828      	bhi.n	8000fb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f66:	4a2f      	ldr	r2, [pc, #188]	; (8001024 <__NVIC_SetPriority+0xd4>)
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	33c0      	adds	r3, #192	; 0xc0
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	589b      	ldr	r3, [r3, r2]
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	400a      	ands	r2, r1
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	21ff      	movs	r1, #255	; 0xff
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	401a      	ands	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	4003      	ands	r3, r0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <__NVIC_SetPriority+0xd4>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	33c0      	adds	r3, #192	; 0xc0
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fb6:	e031      	b.n	800101c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <__NVIC_SetPriority+0xd8>)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3306      	adds	r3, #6
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	18d3      	adds	r3, r2, r3
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1dfa      	adds	r2, r7, #7
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	2203      	movs	r2, #3
 8000fda:	400a      	ands	r2, r1
 8000fdc:	00d2      	lsls	r2, r2, #3
 8000fde:	21ff      	movs	r1, #255	; 0xff
 8000fe0:	4091      	lsls	r1, r2
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	43d2      	mvns	r2, r2
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	4003      	ands	r3, r0
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <__NVIC_SetPriority+0xd8>)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	001c      	movs	r4, r3
 8001008:	230f      	movs	r3, #15
 800100a:	4023      	ands	r3, r4
 800100c:	3b08      	subs	r3, #8
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	430a      	orrs	r2, r1
 8001012:	3306      	adds	r3, #6
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	18c3      	adds	r3, r0, r3
 8001018:	3304      	adds	r3, #4
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b003      	add	sp, #12
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <SysTick_Config+0x40>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d901      	bls.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e010      	b.n	8001064 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <SysTick_Config+0x44>)
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	3a01      	subs	r2, #1
 8001048:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	2301      	movs	r3, #1
 800104c:	425b      	negs	r3, r3
 800104e:	2103      	movs	r1, #3
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff ff7d 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SysTick_Config+0x44>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x44>)
 800105e:	2207      	movs	r2, #7
 8001060:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001062:	2300      	movs	r3, #0
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	00ffffff 	.word	0x00ffffff
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	210f      	movs	r1, #15
 8001080:	187b      	adds	r3, r7, r1
 8001082:	1c02      	adds	r2, r0, #0
 8001084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	187b      	adds	r3, r7, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b25b      	sxtb	r3, r3
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff ffbf 	bl	800102c <SysTick_Config>
 80010ae:	0003      	movs	r3, r0
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	e147      	b.n	8001358 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4091      	lsls	r1, r2
 80010d2:	000a      	movs	r2, r1
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d100      	bne.n	80010e0 <HAL_GPIO_Init+0x28>
 80010de:	e138      	b.n	8001352 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x38>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b12      	cmp	r3, #18
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	58d3      	ldr	r3, [r2, r3]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2207      	movs	r2, #7
 8001102:	4013      	ands	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2107      	movs	r1, #7
 800111c:	400b      	ands	r3, r1
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	409a      	lsls	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	409a      	lsls	r2, r3
 8001146:	0013      	movs	r3, r2
 8001148:	43da      	mvns	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	409a      	lsls	r2, r3
 800115e:	0013      	movs	r3, r2
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d00b      	beq.n	800118c <HAL_GPIO_Init+0xd4>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001180:	2b11      	cmp	r3, #17
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b12      	cmp	r3, #18
 800118a:	d130      	bne.n	80011ee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	409a      	lsls	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	43da      	mvns	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	409a      	lsls	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	2201      	movs	r2, #1
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	055b      	lsls	r3, r3, #21
 8001226:	4013      	ands	r3, r2
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x174>
 800122a:	e092      	b.n	8001352 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800122c:	4a50      	ldr	r2, [pc, #320]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3318      	adds	r3, #24
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	589b      	ldr	r3, [r3, r2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	220f      	movs	r2, #15
 8001244:	409a      	lsls	r2, r3
 8001246:	0013      	movs	r3, r2
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	23a0      	movs	r3, #160	; 0xa0
 8001254:	05db      	lsls	r3, r3, #23
 8001256:	429a      	cmp	r2, r3
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x1ca>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a45      	ldr	r2, [pc, #276]	; (8001374 <HAL_GPIO_Init+0x2bc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x1c6>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a44      	ldr	r2, [pc, #272]	; (8001378 <HAL_GPIO_Init+0x2c0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x1c2>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a43      	ldr	r2, [pc, #268]	; (800137c <HAL_GPIO_Init+0x2c4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x1be>
 8001272:	2303      	movs	r3, #3
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x1cc>
 8001276:	2305      	movs	r3, #5
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x1cc>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x1cc>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x1cc>
 8001282:	2300      	movs	r3, #0
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	2103      	movs	r1, #3
 8001288:	400a      	ands	r2, r1
 800128a:	00d2      	lsls	r2, r2, #3
 800128c:	4093      	lsls	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001294:	4936      	ldr	r1, [pc, #216]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3318      	adds	r3, #24
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012a2:	4a33      	ldr	r2, [pc, #204]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	58d3      	ldr	r3, [r2, r3]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c8:	4929      	ldr	r1, [pc, #164]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 80012d2:	2384      	movs	r3, #132	; 0x84
 80012d4:	58d3      	ldr	r3, [r2, r3]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	029b      	lsls	r3, r3, #10
 80012ea:	4013      	ands	r3, r2
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f6:	491e      	ldr	r1, [pc, #120]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 80012f8:	2284      	movs	r2, #132	; 0x84
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	035b      	lsls	r3, r3, #13
 8001316:	4013      	ands	r3, r2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	039b      	lsls	r3, r3, #14
 8001340:	4013      	ands	r3, r2
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_GPIO_Init+0x2b8>)
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	40da      	lsrs	r2, r3
 8001360:	1e13      	subs	r3, r2, #0
 8001362:	d000      	beq.n	8001366 <HAL_GPIO_Init+0x2ae>
 8001364:	e6b0      	b.n	80010c8 <HAL_GPIO_Init+0x10>
  }
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b006      	add	sp, #24
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40021800 	.word	0x40021800
 8001374:	50000400 	.word	0x50000400
 8001378:	50000800 	.word	0x50000800
 800137c:	50000c00 	.word	0x50000c00

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	0008      	movs	r0, r1
 800138a:	0011      	movs	r1, r2
 800138c:	1cbb      	adds	r3, r7, #2
 800138e:	1c02      	adds	r2, r0, #0
 8001390:	801a      	strh	r2, [r3, #0]
 8001392:	1c7b      	adds	r3, r7, #1
 8001394:	1c0a      	adds	r2, r1, #0
 8001396:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001398:	1c7b      	adds	r3, r7, #1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a0:	1cbb      	adds	r3, r7, #2
 80013a2:	881a      	ldrh	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013aa:	1cbb      	adds	r3, r7, #2
 80013ac:	881a      	ldrh	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	429a      	cmp	r2, r3
 80013de:	d11f      	bne.n	8001420 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	0013      	movs	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	189b      	adds	r3, r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4912      	ldr	r1, [pc, #72]	; (8001438 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7fe fe88 	bl	8000104 <__udivsi3>
 80013f4:	0003      	movs	r3, r0
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013fa:	e008      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3b01      	subs	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	e001      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e009      	b.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	401a      	ands	r2, r3
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	429a      	cmp	r2, r3
 800141e:	d0ed      	beq.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40007000 	.word	0x40007000
 8001430:	fffff9ff 	.word	0xfffff9ff
 8001434:	20000000 	.word	0x20000000
 8001438:	000f4240 	.word	0x000f4240

0800143c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	23e0      	movs	r3, #224	; 0xe0
 8001446:	01db      	lsls	r3, r3, #7
 8001448:	4013      	ands	r3, r2
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e304      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2201      	movs	r2, #1
 800146c:	4013      	ands	r3, r2
 800146e:	d100      	bne.n	8001472 <HAL_RCC_OscConfig+0x1e>
 8001470:	e07c      	b.n	800156c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001472:	4bc3      	ldr	r3, [pc, #780]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2238      	movs	r2, #56	; 0x38
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800147c:	4bc0      	ldr	r3, [pc, #768]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2203      	movs	r2, #3
 8001482:	4013      	ands	r3, r2
 8001484:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b10      	cmp	r3, #16
 800148a:	d102      	bne.n	8001492 <HAL_RCC_OscConfig+0x3e>
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d002      	beq.n	8001498 <HAL_RCC_OscConfig+0x44>
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b08      	cmp	r3, #8
 8001496:	d10b      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	4bb9      	ldr	r3, [pc, #740]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d062      	beq.n	800156a <HAL_RCC_OscConfig+0x116>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d15e      	bne.n	800156a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e2df      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	025b      	lsls	r3, r3, #9
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d107      	bne.n	80014cc <HAL_RCC_OscConfig+0x78>
 80014bc:	4bb0      	ldr	r3, [pc, #704]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4baf      	ldr	r3, [pc, #700]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	0249      	lsls	r1, r1, #9
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e020      	b.n	800150e <HAL_RCC_OscConfig+0xba>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	23a0      	movs	r3, #160	; 0xa0
 80014d2:	02db      	lsls	r3, r3, #11
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10e      	bne.n	80014f6 <HAL_RCC_OscConfig+0xa2>
 80014d8:	4ba9      	ldr	r3, [pc, #676]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4ba8      	ldr	r3, [pc, #672]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	02c9      	lsls	r1, r1, #11
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	4ba6      	ldr	r3, [pc, #664]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4ba5      	ldr	r3, [pc, #660]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	0249      	lsls	r1, r1, #9
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0xba>
 80014f6:	4ba2      	ldr	r3, [pc, #648]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4ba1      	ldr	r3, [pc, #644]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80014fc:	49a1      	ldr	r1, [pc, #644]	; (8001784 <HAL_RCC_OscConfig+0x330>)
 80014fe:	400a      	ands	r2, r1
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	4b9f      	ldr	r3, [pc, #636]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b9e      	ldr	r3, [pc, #632]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001508:	499f      	ldr	r1, [pc, #636]	; (8001788 <HAL_RCC_OscConfig+0x334>)
 800150a:	400a      	ands	r2, r1
 800150c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d014      	beq.n	8001540 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff fcef 	bl	8000ef8 <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcea 	bl	8000ef8 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e29e      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001532:	4b93      	ldr	r3, [pc, #588]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4013      	ands	r3, r2
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xcc>
 800153e:	e015      	b.n	800156c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fcda 	bl	8000ef8 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154a:	f7ff fcd5 	bl	8000ef8 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e289      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155c:	4b88      	ldr	r3, [pc, #544]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	029b      	lsls	r3, r3, #10
 8001564:	4013      	ands	r3, r2
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0xf6>
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d100      	bne.n	8001578 <HAL_RCC_OscConfig+0x124>
 8001576:	e099      	b.n	80016ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001578:	4b81      	ldr	r3, [pc, #516]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2238      	movs	r2, #56	; 0x38
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001582:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2203      	movs	r2, #3
 8001588:	4013      	ands	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d102      	bne.n	8001598 <HAL_RCC_OscConfig+0x144>
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d002      	beq.n	800159e <HAL_RCC_OscConfig+0x14a>
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d135      	bne.n	800160a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159e:	4b78      	ldr	r3, [pc, #480]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4013      	ands	r3, r2
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x162>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e25c      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b72      	ldr	r3, [pc, #456]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a74      	ldr	r2, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x338>)
 80015bc:	4013      	ands	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	021a      	lsls	r2, r3, #8
 80015c6:	4b6e      	ldr	r3, [pc, #440]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d112      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015d2:	4b6b      	ldr	r3, [pc, #428]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a6e      	ldr	r2, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x33c>)
 80015d8:	4013      	ands	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	4b67      	ldr	r3, [pc, #412]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80015e6:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	0adb      	lsrs	r3, r3, #11
 80015ec:	2207      	movs	r2, #7
 80015ee:	4013      	ands	r3, r2
 80015f0:	4a68      	ldr	r2, [pc, #416]	; (8001794 <HAL_RCC_OscConfig+0x340>)
 80015f2:	40da      	lsrs	r2, r3
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x344>)
 80015f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x348>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff fc21 	bl	8000e44 <HAL_InitTick>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d051      	beq.n	80016aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e232      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d030      	beq.n	8001674 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001612:	4b5b      	ldr	r3, [pc, #364]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a5e      	ldr	r2, [pc, #376]	; (8001790 <HAL_RCC_OscConfig+0x33c>)
 8001618:	4013      	ands	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	4b57      	ldr	r3, [pc, #348]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001626:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b55      	ldr	r3, [pc, #340]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0049      	lsls	r1, r1, #1
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc60 	bl	8000ef8 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fc5b 	bl	8000ef8 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e20f      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4013      	ands	r3, r2
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a4a      	ldr	r2, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x338>)
 8001662:	4013      	ands	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	021a      	lsls	r2, r3, #8
 800166c:	4b44      	ldr	r3, [pc, #272]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	e01b      	b.n	80016ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001674:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800167a:	4949      	ldr	r1, [pc, #292]	; (80017a0 <HAL_RCC_OscConfig+0x34c>)
 800167c:	400a      	ands	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fc3a 	bl	8000ef8 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fc35 	bl	8000ef8 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1e9      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169c:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4013      	ands	r3, r2
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x236>
 80016a8:	e000      	b.n	80016ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2208      	movs	r2, #8
 80016b2:	4013      	ands	r3, r2
 80016b4:	d047      	beq.n	8001746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2238      	movs	r2, #56	; 0x38
 80016bc:	4013      	ands	r3, r2
 80016be:	2b18      	cmp	r3, #24
 80016c0:	d10a      	bne.n	80016d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d03c      	beq.n	8001746 <HAL_RCC_OscConfig+0x2f2>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d138      	bne.n	8001746 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e1cb      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d019      	beq.n	8001714 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc04 	bl	8000ef8 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fbff 	bl	8000ef8 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1b3      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800170a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d0f1      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2a2>
 8001712:	e018      	b.n	8001746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001716:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800171a:	2101      	movs	r1, #1
 800171c:	438a      	bics	r2, r1
 800171e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fbea 	bl	8000ef8 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172a:	f7ff fbe5 	bl	8000ef8 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e199      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	2202      	movs	r2, #2
 8001742:	4013      	ands	r3, r2
 8001744:	d1f1      	bne.n	800172a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2204      	movs	r2, #4
 800174c:	4013      	ands	r3, r2
 800174e:	d100      	bne.n	8001752 <HAL_RCC_OscConfig+0x2fe>
 8001750:	e0c6      	b.n	80018e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001752:	231f      	movs	r3, #31
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2238      	movs	r2, #56	; 0x38
 8001760:	4013      	ands	r3, r2
 8001762:	2b20      	cmp	r3, #32
 8001764:	d11e      	bne.n	80017a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_RCC_OscConfig+0x32c>)
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d100      	bne.n	8001772 <HAL_RCC_OscConfig+0x31e>
 8001770:	e0b6      	b.n	80018e0 <HAL_RCC_OscConfig+0x48c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d000      	beq.n	800177c <HAL_RCC_OscConfig+0x328>
 800177a:	e0b1      	b.n	80018e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e177      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
 8001780:	40021000 	.word	0x40021000
 8001784:	fffeffff 	.word	0xfffeffff
 8001788:	fffbffff 	.word	0xfffbffff
 800178c:	ffff80ff 	.word	0xffff80ff
 8001790:	ffffc7ff 	.word	0xffffc7ff
 8001794:	00f42400 	.word	0x00f42400
 8001798:	20000000 	.word	0x20000000
 800179c:	20000004 	.word	0x20000004
 80017a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017a4:	4bb4      	ldr	r3, [pc, #720]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80017a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	055b      	lsls	r3, r3, #21
 80017ac:	4013      	ands	r3, r2
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x360>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x362>
 80017b4:	2300      	movs	r3, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d011      	beq.n	80017de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4baf      	ldr	r3, [pc, #700]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80017bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017be:	4bae      	ldr	r3, [pc, #696]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	0549      	lsls	r1, r1, #21
 80017c4:	430a      	orrs	r2, r1
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80017c8:	4bab      	ldr	r3, [pc, #684]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80017ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	055b      	lsls	r3, r3, #21
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80017d6:	231f      	movs	r3, #31
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017de:	4ba7      	ldr	r3, [pc, #668]	; (8001a7c <HAL_RCC_OscConfig+0x628>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	d11a      	bne.n	8001820 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ea:	4ba4      	ldr	r3, [pc, #656]	; (8001a7c <HAL_RCC_OscConfig+0x628>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4ba3      	ldr	r3, [pc, #652]	; (8001a7c <HAL_RCC_OscConfig+0x628>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0049      	lsls	r1, r1, #1
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb7e 	bl	8000ef8 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fb79 	bl	8000ef8 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e12d      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001814:	4b99      	ldr	r3, [pc, #612]	; (8001a7c <HAL_RCC_OscConfig+0x628>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4013      	ands	r3, r2
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x3e2>
 8001828:	4b93      	ldr	r3, [pc, #588]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800182a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800182c:	4b92      	ldr	r3, [pc, #584]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800182e:	2101      	movs	r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	65da      	str	r2, [r3, #92]	; 0x5c
 8001834:	e01c      	b.n	8001870 <HAL_RCC_OscConfig+0x41c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x404>
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001842:	4b8d      	ldr	r3, [pc, #564]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001844:	2104      	movs	r1, #4
 8001846:	430a      	orrs	r2, r1
 8001848:	65da      	str	r2, [r3, #92]	; 0x5c
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800184c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800184e:	4b8a      	ldr	r3, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	65da      	str	r2, [r3, #92]	; 0x5c
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x41c>
 8001858:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800185a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800185c:	4b86      	ldr	r3, [pc, #536]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800185e:	2101      	movs	r1, #1
 8001860:	438a      	bics	r2, r1
 8001862:	65da      	str	r2, [r3, #92]	; 0x5c
 8001864:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001866:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001868:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800186a:	2104      	movs	r1, #4
 800186c:	438a      	bics	r2, r1
 800186e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d014      	beq.n	80018a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fb3e 	bl	8000ef8 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001880:	e009      	b.n	8001896 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff fb39 	bl	8000ef8 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a7c      	ldr	r2, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x62c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0ec      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001896:	4b78      	ldr	r3, [pc, #480]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x42e>
 80018a0:	e013      	b.n	80018ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb29 	bl	8000ef8 <HAL_GetTick>
 80018a6:	0003      	movs	r3, r0
 80018a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018aa:	e009      	b.n	80018c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff fb24 	bl	8000ef8 <HAL_GetTick>
 80018b0:	0002      	movs	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	4a72      	ldr	r2, [pc, #456]	; (8001a80 <HAL_RCC_OscConfig+0x62c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0d7      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c0:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018ca:	231f      	movs	r3, #31
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80018d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d8:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80018da:	496a      	ldr	r1, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x630>)
 80018dc:	400a      	ands	r2, r1
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d100      	bne.n	80018ea <HAL_RCC_OscConfig+0x496>
 80018e8:	e0c1      	b.n	8001a6e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2238      	movs	r2, #56	; 0x38
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d100      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4a4>
 80018f6:	e081      	b.n	80019fc <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d156      	bne.n	80019ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001906:	4960      	ldr	r1, [pc, #384]	; (8001a88 <HAL_RCC_OscConfig+0x634>)
 8001908:	400a      	ands	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff faf4 	bl	8000ef8 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff faef 	bl	8000ef8 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0a3      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	049b      	lsls	r3, r3, #18
 8001930:	4013      	ands	r3, r2
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a54      	ldr	r2, [pc, #336]	; (8001a8c <HAL_RCC_OscConfig+0x638>)
 800193a:	4013      	ands	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	431a      	orrs	r2, r3
 8001962:	4b45      	ldr	r3, [pc, #276]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b42      	ldr	r3, [pc, #264]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	0449      	lsls	r1, r1, #17
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001976:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	0549      	lsls	r1, r1, #21
 8001980:	430a      	orrs	r2, r1
 8001982:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fab8 	bl	8000ef8 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff fab3 	bl	8000ef8 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e067      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	049b      	lsls	r3, r3, #18
 80019a8:	4013      	ands	r3, r2
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x53a>
 80019ac:	e05f      	b.n	8001a6e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80019b4:	4934      	ldr	r1, [pc, #208]	; (8001a88 <HAL_RCC_OscConfig+0x634>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80019ba:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80019c0:	2103      	movs	r1, #3
 80019c2:	438a      	bics	r2, r1
 80019c4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80019cc:	4930      	ldr	r1, [pc, #192]	; (8001a90 <HAL_RCC_OscConfig+0x63c>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff fa91 	bl	8000ef8 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff fa8c 	bl	8000ef8 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e040      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	049b      	lsls	r3, r3, #18
 80019f6:	4013      	ands	r3, r2
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x588>
 80019fa:	e038      	b.n	8001a6e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e033      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x624>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2203      	movs	r2, #3
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d126      	bne.n	8001a6a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2270      	movs	r2, #112	; 0x70
 8001a20:	401a      	ands	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	23fe      	movs	r3, #254	; 0xfe
 8001a2e:	01db      	lsls	r3, r3, #7
 8001a30:	401a      	ands	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d116      	bne.n	8001a6a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	23f8      	movs	r3, #248	; 0xf8
 8001a40:	039b      	lsls	r3, r3, #14
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10e      	bne.n	8001a6a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	23e0      	movs	r3, #224	; 0xe0
 8001a50:	051b      	lsls	r3, r3, #20
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	0f5b      	lsrs	r3, r3, #29
 8001a60:	075a      	lsls	r2, r3, #29
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b008      	add	sp, #32
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	00001388 	.word	0x00001388
 8001a84:	efffffff 	.word	0xefffffff
 8001a88:	feffffff 	.word	0xfeffffff
 8001a8c:	11c1808c 	.word	0x11c1808c
 8001a90:	eefeffff 	.word	0xeefeffff

08001a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0e9      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2207      	movs	r2, #7
 8001aae:	4013      	ands	r3, r2
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d91e      	bls.n	8001af4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b73      	ldr	r3, [pc, #460]	; (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4393      	bics	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac8:	f7ff fa16 	bl	8000ef8 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad2:	f7ff fa11 	bl	8000ef8 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4a6a      	ldr	r2, [pc, #424]	; (8001c88 <HAL_RCC_ClockConfig+0x1f4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0ca      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ae6:	4b67      	ldr	r3, [pc, #412]	; (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2207      	movs	r2, #7
 8001aec:	4013      	ands	r3, r2
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1ee      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d015      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2204      	movs	r2, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	d006      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b08:	4b60      	ldr	r3, [pc, #384]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b0e:	21e0      	movs	r1, #224	; 0xe0
 8001b10:	01c9      	lsls	r1, r1, #7
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b16:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a5d      	ldr	r2, [pc, #372]	; (8001c90 <HAL_RCC_ClockConfig+0x1fc>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d057      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	4013      	ands	r3, r2
 8001b46:	d12b      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e097      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b54:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	049b      	lsls	r3, r3, #18
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d11f      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e08b      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4013      	ands	r3, r2
 8001b76:	d113      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e07f      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b84:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b88:	2202      	movs	r2, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d108      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e074      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b92:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e06d      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb4:	f7ff f9a0 	bl	8000ef8 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbc:	e009      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbe:	f7ff f99b 	bl	8000ef8 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	4a2f      	ldr	r2, [pc, #188]	; (8001c88 <HAL_RCC_ClockConfig+0x1f4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e054      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2238      	movs	r2, #56	; 0x38
 8001bd8:	401a      	ands	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1ec      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2207      	movs	r2, #7
 8001bea:	4013      	ands	r3, r2
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d21e      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f978 	bl	8000ef8 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0e:	f7ff f973 	bl	8000ef8 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <HAL_RCC_ClockConfig+0x1f4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e02c      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2207      	movs	r2, #7
 8001c28:	4013      	ands	r3, r2
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1ee      	bne.n	8001c0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2204      	movs	r2, #4
 8001c36:	4013      	ands	r3, r2
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <HAL_RCC_ClockConfig+0x200>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c4e:	f000 f829 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c52:	0001      	movs	r1, r0
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_RCC_ClockConfig+0x204>)
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	58d3      	ldr	r3, [r2, r3]
 8001c64:	221f      	movs	r2, #31
 8001c66:	4013      	ands	r3, r2
 8001c68:	000a      	movs	r2, r1
 8001c6a:	40da      	lsrs	r2, r3
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x208>)
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_ClockConfig+0x20c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff f8e5 	bl	8000e44 <HAL_InitTick>
 8001c7a:	0003      	movs	r3, r0
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40022000 	.word	0x40022000
 8001c88:	00001388 	.word	0x00001388
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	fffff0ff 	.word	0xfffff0ff
 8001c94:	ffff8fff 	.word	0xffff8fff
 8001c98:	08003fc4 	.word	0x08003fc4
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2238      	movs	r2, #56	; 0x38
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0adb      	lsrs	r3, r3, #11
 8001cba:	2207      	movs	r2, #7
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cc6:	6839      	ldr	r1, [r7, #0]
 8001cc8:	4835      	ldr	r0, [pc, #212]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cca:	f7fe fa1b 	bl	8000104 <__udivsi3>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	e05d      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cd4:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2238      	movs	r2, #56	; 0x38
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	e054      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2238      	movs	r2, #56	; 0x38
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d138      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	2207      	movs	r2, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	3301      	adds	r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d10d      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	4824      	ldr	r0, [pc, #144]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d14:	f7fe f9f6 	bl	8000104 <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	227f      	movs	r2, #127	; 0x7f
 8001d24:	4013      	ands	r3, r2
 8001d26:	434b      	muls	r3, r1
 8001d28:	617b      	str	r3, [r7, #20]
        break;
 8001d2a:	e00d      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	481c      	ldr	r0, [pc, #112]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d30:	f7fe f9e8 	bl	8000104 <__udivsi3>
 8001d34:	0003      	movs	r3, r0
 8001d36:	0019      	movs	r1, r3
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	227f      	movs	r2, #127	; 0x7f
 8001d40:	4013      	ands	r3, r2
 8001d42:	434b      	muls	r3, r1
 8001d44:	617b      	str	r3, [r7, #20]
        break;
 8001d46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0f5b      	lsrs	r3, r3, #29
 8001d4e:	2207      	movs	r2, #7
 8001d50:	4013      	ands	r3, r2
 8001d52:	3301      	adds	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	6978      	ldr	r0, [r7, #20]
 8001d5a:	f7fe f9d3 	bl	8000104 <__udivsi3>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e015      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2238      	movs	r2, #56	; 0x38
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d103      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2238      	movs	r2, #56	; 0x38
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b18      	cmp	r3, #24
 8001d82:	d103      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d84:	23fa      	movs	r3, #250	; 0xfa
 8001d86:	01db      	lsls	r3, r3, #7
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e001      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d90:	693b      	ldr	r3, [r7, #16]
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b006      	add	sp, #24
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	00f42400 	.word	0x00f42400
 8001da4:	007a1200 	.word	0x007a1200

08001da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001dc0:	f7ff fff2 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001dc4:	0004      	movs	r4, r0
 8001dc6:	f7ff fb39 	bl	800143c <LL_RCC_GetAPB1Prescaler>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	0b1a      	lsrs	r2, r3, #12
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	58d3      	ldr	r3, [r2, r3]
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	40dc      	lsrs	r4, r3
 8001dda:	0023      	movs	r3, r4
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bdb0      	pop	{r4, r5, r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	08004004 	.word	0x08004004

08001de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001df0:	2313      	movs	r3, #19
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001df8:	2312      	movs	r3, #18
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d100      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e0c:	e0a4      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2311      	movs	r3, #17
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e16:	4bc3      	ldr	r3, [pc, #780]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	055b      	lsls	r3, r3, #21
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d111      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4bc0      	ldr	r3, [pc, #768]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e26:	4bbf      	ldr	r3, [pc, #764]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	0549      	lsls	r1, r1, #21
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e30:	4bbc      	ldr	r3, [pc, #752]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	055b      	lsls	r3, r3, #21
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3e:	2311      	movs	r3, #17
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e46:	4bb8      	ldr	r3, [pc, #736]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4bb7      	ldr	r3, [pc, #732]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0049      	lsls	r1, r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e54:	f7ff f850 	bl	8000ef8 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5e:	f7ff f84b 	bl	8000ef8 <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d904      	bls.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001e6c:	2313      	movs	r3, #19
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2203      	movs	r2, #3
 8001e72:	701a      	strb	r2, [r3, #0]
        break;
 8001e74:	e005      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e76:	4bac      	ldr	r3, [pc, #688]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d0ed      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001e82:	2313      	movs	r3, #19
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d154      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e8c:	4ba5      	ldr	r3, [pc, #660]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e90:	23c0      	movs	r3, #192	; 0xc0
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d019      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d014      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ea8:	4b9e      	ldr	r3, [pc, #632]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	4a9f      	ldr	r2, [pc, #636]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eb2:	4b9c      	ldr	r3, [pc, #624]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eb6:	4b9b      	ldr	r3, [pc, #620]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	0249      	lsls	r1, r1, #9
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec0:	4b98      	ldr	r3, [pc, #608]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ec4:	4b97      	ldr	r3, [pc, #604]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec6:	499a      	ldr	r1, [pc, #616]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ecc:	4b95      	ldr	r3, [pc, #596]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d016      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff f80d 	bl	8000ef8 <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee2:	e00c      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f808 	bl	8000ef8 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	4a91      	ldr	r2, [pc, #580]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d904      	bls.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001ef4:	2313      	movs	r3, #19
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2203      	movs	r2, #3
 8001efa:	701a      	strb	r2, [r3, #0]
            break;
 8001efc:	e004      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4b89      	ldr	r3, [pc, #548]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0ed      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001f08:	2313      	movs	r3, #19
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f12:	4b84      	ldr	r3, [pc, #528]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	4a85      	ldr	r2, [pc, #532]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f20:	4b80      	ldr	r3, [pc, #512]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f26:	e00c      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2213      	movs	r2, #19
 8001f2e:	18ba      	adds	r2, r7, r2
 8001f30:	7812      	ldrb	r2, [r2, #0]
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e005      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f36:	2312      	movs	r3, #18
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	2213      	movs	r2, #19
 8001f3c:	18ba      	adds	r2, r7, r2
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f42:	2311      	movs	r3, #17
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4c:	4b75      	ldr	r3, [pc, #468]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f50:	4b74      	ldr	r3, [pc, #464]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f52:	4979      	ldr	r1, [pc, #484]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f62:	4b70      	ldr	r3, [pc, #448]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	2203      	movs	r2, #3
 8001f68:	4393      	bics	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f80:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	220c      	movs	r2, #12
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f9e:	4b61      	ldr	r3, [pc, #388]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	4a66      	ldr	r2, [pc, #408]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fbe:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	4a5f      	ldr	r2, [pc, #380]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	4b55      	ldr	r3, [pc, #340]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fde:	4b51      	ldr	r3, [pc, #324]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	4b4d      	ldr	r3, [pc, #308]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ffc:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200c:	430a      	orrs	r2, r1
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	01db      	lsls	r3, r3, #7
 8002018:	4013      	ands	r3, r2
 800201a:	d015      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	0899      	lsrs	r1, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800202a:	430a      	orrs	r2, r1
 800202c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1a      	ldr	r2, [r3, #32]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	429a      	cmp	r2, r3
 8002038:	d106      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0249      	lsls	r1, r1, #9
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	031b      	lsls	r3, r3, #12
 8002050:	4013      	ands	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002054:	4b33      	ldr	r3, [pc, #204]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	4393      	bics	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002062:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002064:	430a      	orrs	r2, r1
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	039b      	lsls	r3, r3, #14
 8002070:	4013      	ands	r3, r2
 8002072:	d016      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	4a34      	ldr	r2, [pc, #208]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002084:	430a      	orrs	r2, r1
 8002086:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	03db      	lsls	r3, r3, #15
 8002090:	429a      	cmp	r2, r3
 8002092:	d106      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	0449      	lsls	r1, r1, #17
 800209e:	430a      	orrs	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	03db      	lsls	r3, r3, #15
 80020aa:	4013      	ands	r3, r2
 80020ac:	d016      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	4a27      	ldr	r2, [pc, #156]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	045b      	lsls	r3, r3, #17
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d106      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0449      	lsls	r1, r1, #17
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d016      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	01db      	lsls	r3, r3, #7
 8002104:	429a      	cmp	r2, r3
 8002106:	d106      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0249      	lsls	r1, r1, #9
 8002112:	430a      	orrs	r2, r1
 8002114:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002116:	2312      	movs	r3, #18
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b006      	add	sp, #24
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
 800212c:	fffffcff 	.word	0xfffffcff
 8002130:	fffeffff 	.word	0xfffeffff
 8002134:	00001388 	.word	0x00001388
 8002138:	efffffff 	.word	0xefffffff
 800213c:	fffff3ff 	.word	0xfffff3ff
 8002140:	fff3ffff 	.word	0xfff3ffff
 8002144:	ffcfffff 	.word	0xffcfffff
 8002148:	ffffcfff 	.word	0xffffcfff
 800214c:	ffbfffff 	.word	0xffbfffff
 8002150:	feffffff 	.word	0xfeffffff
 8002154:	ffff3fff 	.word	0xffff3fff

08002158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e01e      	b.n	80021a8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223d      	movs	r2, #61	; 0x3d
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	223c      	movs	r2, #60	; 0x3c
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f7fe fd85 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	223d      	movs	r2, #61	; 0x3d
 800218a:	2102      	movs	r1, #2
 800218c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	0019      	movs	r1, r3
 8002198:	0010      	movs	r0, r2
 800219a:	f000 f8f3 	bl	8002384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	223d      	movs	r2, #61	; 0x3d
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	223d      	movs	r2, #61	; 0x3d
 80021bc:	2102      	movs	r1, #2
 80021be:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_TIM_Base_Start+0x50>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d00c      	beq.n	80021ec <HAL_TIM_Base_Start+0x3c>
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	429a      	cmp	r2, r3
 80021da:	d007      	beq.n	80021ec <HAL_TIM_Base_Start+0x3c>
  {
    __HAL_TIM_ENABLE(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	223d      	movs	r2, #61	; 0x3d
 80021f0:	2101      	movs	r1, #1
 80021f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	00010007 	.word	0x00010007

08002204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	223c      	movs	r2, #60	; 0x3c
 8002212:	5c9b      	ldrb	r3, [r3, r2]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_TIM_ConfigClockSource+0x18>
 8002218:	2302      	movs	r3, #2
 800221a:	e0ab      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x170>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	223c      	movs	r2, #60	; 0x3c
 8002220:	2101      	movs	r1, #1
 8002222:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	223d      	movs	r2, #61	; 0x3d
 8002228:	2102      	movs	r1, #2
 800222a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4a51      	ldr	r2, [pc, #324]	; (800237c <HAL_TIM_ConfigClockSource+0x178>)
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a50      	ldr	r2, [pc, #320]	; (8002380 <HAL_TIM_ConfigClockSource+0x17c>)
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d100      	bne.n	8002256 <HAL_TIM_ConfigClockSource+0x52>
 8002254:	e06b      	b.n	800232e <HAL_TIM_ConfigClockSource+0x12a>
 8002256:	d80e      	bhi.n	8002276 <HAL_TIM_ConfigClockSource+0x72>
 8002258:	2b10      	cmp	r3, #16
 800225a:	d100      	bne.n	800225e <HAL_TIM_ConfigClockSource+0x5a>
 800225c:	e077      	b.n	800234e <HAL_TIM_ConfigClockSource+0x14a>
 800225e:	d803      	bhi.n	8002268 <HAL_TIM_ConfigClockSource+0x64>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d100      	bne.n	8002266 <HAL_TIM_ConfigClockSource+0x62>
 8002264:	e073      	b.n	800234e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002266:	e07c      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002268:	2b20      	cmp	r3, #32
 800226a:	d100      	bne.n	800226e <HAL_TIM_ConfigClockSource+0x6a>
 800226c:	e06f      	b.n	800234e <HAL_TIM_ConfigClockSource+0x14a>
 800226e:	2b30      	cmp	r3, #48	; 0x30
 8002270:	d100      	bne.n	8002274 <HAL_TIM_ConfigClockSource+0x70>
 8002272:	e06c      	b.n	800234e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002274:	e075      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002276:	2b70      	cmp	r3, #112	; 0x70
 8002278:	d00e      	beq.n	8002298 <HAL_TIM_ConfigClockSource+0x94>
 800227a:	d804      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x82>
 800227c:	2b50      	cmp	r3, #80	; 0x50
 800227e:	d036      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0xea>
 8002280:	2b60      	cmp	r3, #96	; 0x60
 8002282:	d044      	beq.n	800230e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002284:	e06d      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	0152      	lsls	r2, r2, #5
 800228a:	4293      	cmp	r3, r2
 800228c:	d068      	beq.n	8002360 <HAL_TIM_ConfigClockSource+0x15c>
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0192      	lsls	r2, r2, #6
 8002292:	4293      	cmp	r3, r2
 8002294:	d017      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002296:	e064      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f000 f968 	bl	800257c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2277      	movs	r2, #119	; 0x77
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]
      break;
 80022c4:	e04d      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f000 f951 	bl	800257c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	01c9      	lsls	r1, r1, #7
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
      break;
 80022ec:	e039      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	001a      	movs	r2, r3
 80022fc:	f000 f8c2 	bl	8002484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2150      	movs	r1, #80	; 0x50
 8002306:	0018      	movs	r0, r3
 8002308:	f000 f91c 	bl	8002544 <TIM_ITRx_SetConfig>
      break;
 800230c:	e029      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6859      	ldr	r1, [r3, #4]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	001a      	movs	r2, r3
 800231c:	f000 f8e0 	bl	80024e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2160      	movs	r1, #96	; 0x60
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f90c 	bl	8002544 <TIM_ITRx_SetConfig>
      break;
 800232c:	e019      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	001a      	movs	r2, r3
 800233c:	f000 f8a2 	bl	8002484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	0018      	movs	r0, r3
 8002348:	f000 f8fc 	bl	8002544 <TIM_ITRx_SetConfig>
      break;
 800234c:	e009      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0019      	movs	r1, r3
 8002358:	0010      	movs	r0, r2
 800235a:	f000 f8f3 	bl	8002544 <TIM_ITRx_SetConfig>
      break;
 800235e:	e000      	b.n	8002362 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002360:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	223d      	movs	r2, #61	; 0x3d
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223c      	movs	r2, #60	; 0x3c
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}
 800237c:	ffceff88 	.word	0xffceff88
 8002380:	ffff00ff 	.word	0xffff00ff

08002384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a34      	ldr	r2, [pc, #208]	; (8002468 <TIM_Base_SetConfig+0xe4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d008      	beq.n	80023ae <TIM_Base_SetConfig+0x2a>
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	05db      	lsls	r3, r3, #23
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0x2a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a30      	ldr	r2, [pc, #192]	; (800246c <TIM_Base_SetConfig+0xe8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d108      	bne.n	80023c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2270      	movs	r2, #112	; 0x70
 80023b2:	4393      	bics	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a29      	ldr	r2, [pc, #164]	; (8002468 <TIM_Base_SetConfig+0xe4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d018      	beq.n	80023fa <TIM_Base_SetConfig+0x76>
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	05db      	lsls	r3, r3, #23
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d013      	beq.n	80023fa <TIM_Base_SetConfig+0x76>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <TIM_Base_SetConfig+0xe8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00f      	beq.n	80023fa <TIM_Base_SetConfig+0x76>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <TIM_Base_SetConfig+0xec>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00b      	beq.n	80023fa <TIM_Base_SetConfig+0x76>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <TIM_Base_SetConfig+0xf0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <TIM_Base_SetConfig+0x76>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <TIM_Base_SetConfig+0xf4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <TIM_Base_SetConfig+0x76>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <TIM_Base_SetConfig+0xf8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d108      	bne.n	800240c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4a20      	ldr	r2, [pc, #128]	; (8002480 <TIM_Base_SetConfig+0xfc>)
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	4393      	bics	r3, r2
 8002412:	001a      	movs	r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <TIM_Base_SetConfig+0xe4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00b      	beq.n	8002452 <TIM_Base_SetConfig+0xce>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <TIM_Base_SetConfig+0xf0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <TIM_Base_SetConfig+0xce>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <TIM_Base_SetConfig+0xf4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d003      	beq.n	8002452 <TIM_Base_SetConfig+0xce>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0b      	ldr	r2, [pc, #44]	; (800247c <TIM_Base_SetConfig+0xf8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d103      	bne.n	800245a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	615a      	str	r2, [r3, #20]
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b004      	add	sp, #16
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40000400 	.word	0x40000400
 8002470:	40002000 	.word	0x40002000
 8002474:	40014000 	.word	0x40014000
 8002478:	40014400 	.word	0x40014400
 800247c:	40014800 	.word	0x40014800
 8002480:	fffffcff 	.word	0xfffffcff

08002484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	2201      	movs	r2, #1
 800249c:	4393      	bics	r3, r2
 800249e:	001a      	movs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	22f0      	movs	r2, #240	; 0xf0
 80024ae:	4393      	bics	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	220a      	movs	r2, #10
 80024c0:	4393      	bics	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	621a      	str	r2, [r3, #32]
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b006      	add	sp, #24
 80024de:	bd80      	pop	{r7, pc}

080024e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	2210      	movs	r2, #16
 80024f2:	4393      	bics	r3, r2
 80024f4:	001a      	movs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <TIM_TI2_ConfigInputStage+0x60>)
 800250a:	4013      	ands	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	031b      	lsls	r3, r3, #12
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	22a0      	movs	r2, #160	; 0xa0
 800251c:	4393      	bics	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	621a      	str	r2, [r3, #32]
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b006      	add	sp, #24
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	ffff0fff 	.word	0xffff0fff

08002544 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a08      	ldr	r2, [pc, #32]	; (8002578 <TIM_ITRx_SetConfig+0x34>)
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	2207      	movs	r2, #7
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	ffcfff8f 	.word	0xffcfff8f

0800257c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <TIM_ETR_SetConfig+0x3c>)
 8002594:	4013      	ands	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	021a      	lsls	r2, r3, #8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	431a      	orrs	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	609a      	str	r2, [r3, #8]
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b006      	add	sp, #24
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	ffff00ff 	.word	0xffff00ff

080025bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	223c      	movs	r2, #60	; 0x3c
 80025ca:	5c9b      	ldrb	r3, [r3, r2]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e040      	b.n	8002656 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	223c      	movs	r2, #60	; 0x3c
 80025d8:	2101      	movs	r1, #1
 80025da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	223d      	movs	r2, #61	; 0x3d
 80025e0:	2102      	movs	r1, #2
 80025e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a19      	ldr	r2, [pc, #100]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d108      	bne.n	8002610 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002602:	4013      	ands	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2270      	movs	r2, #112	; 0x70
 8002614:	4393      	bics	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	4393      	bics	r3, r2
 8002628:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4313      	orrs	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	223d      	movs	r2, #61	; 0x3d
 8002648:	2101      	movs	r1, #1
 800264a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	223c      	movs	r2, #60	; 0x3c
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	40012c00 	.word	0x40012c00
 8002664:	ff0fffff 	.word	0xff0fffff

08002668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223c      	movs	r2, #60	; 0x3c
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002680:	2302      	movs	r3, #2
 8002682:	e079      	b.n	8002778 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	223c      	movs	r2, #60	; 0x3c
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	22ff      	movs	r2, #255	; 0xff
 8002690:	4393      	bics	r3, r2
 8002692:	001a      	movs	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a38      	ldr	r2, [pc, #224]	; (8002780 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80026a0:	401a      	ands	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a35      	ldr	r2, [pc, #212]	; (8002784 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80026ae:	401a      	ands	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a33      	ldr	r2, [pc, #204]	; (8002788 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80026bc:	401a      	ands	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a30      	ldr	r2, [pc, #192]	; (800278c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80026ca:	401a      	ands	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a2e      	ldr	r2, [pc, #184]	; (8002790 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80026d8:	401a      	ands	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80026e6:	401a      	ands	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a29      	ldr	r2, [pc, #164]	; (8002798 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80026f4:	401a      	ands	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a25      	ldr	r2, [pc, #148]	; (800279c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d106      	bne.n	8002718 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800270e:	401a      	ands	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d121      	bne.n	8002766 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002726:	401a      	ands	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	051b      	lsls	r3, r3, #20
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002736:	401a      	ands	r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002744:	401a      	ands	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d106      	bne.n	8002766 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800275c:	401a      	ands	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223c      	movs	r2, #60	; 0x3c
 8002772:	2100      	movs	r1, #0
 8002774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b004      	add	sp, #16
 800277e:	bd80      	pop	{r7, pc}
 8002780:	fffffcff 	.word	0xfffffcff
 8002784:	fffffbff 	.word	0xfffffbff
 8002788:	fffff7ff 	.word	0xfffff7ff
 800278c:	ffffefff 	.word	0xffffefff
 8002790:	ffffdfff 	.word	0xffffdfff
 8002794:	ffffbfff 	.word	0xffffbfff
 8002798:	fff0ffff 	.word	0xfff0ffff
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	efffffff 	.word	0xefffffff
 80027a4:	ff0fffff 	.word	0xff0fffff
 80027a8:	feffffff 	.word	0xfeffffff
 80027ac:	fdffffff 	.word	0xfdffffff
 80027b0:	dfffffff 	.word	0xdfffffff

080027b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e046      	b.n	8002854 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2280      	movs	r2, #128	; 0x80
 80027ca:	589b      	ldr	r3, [r3, r2]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d107      	bne.n	80027e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	227c      	movs	r2, #124	; 0x7c
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fe fa78 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	2124      	movs	r1, #36	; 0x24
 80027e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2101      	movs	r1, #1
 80027f4:	438a      	bics	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 f830 	bl	8002860 <UART_SetConfig>
 8002800:	0003      	movs	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e024      	b.n	8002854 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f001 f917 	bl	8003a48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	490d      	ldr	r1, [pc, #52]	; (800285c <HAL_UART_Init+0xa8>)
 8002826:	400a      	ands	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	212a      	movs	r1, #42	; 0x2a
 8002836:	438a      	bics	r2, r1
 8002838:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0018      	movs	r0, r3
 800284e:	f001 f9af 	bl	8003bb0 <UART_CheckIdleState>
 8002852:	0003      	movs	r3, r0
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}
 800285c:	ffffb7ff 	.word	0xffffb7ff

08002860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	b0a1      	sub	sp, #132	; 0x84
 8002864:	af00      	add	r7, sp, #0
 8002866:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002868:	2300      	movs	r3, #0
 800286a:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800286c:	231b      	movs	r3, #27
 800286e:	2258      	movs	r2, #88	; 0x58
 8002870:	18ba      	adds	r2, r7, r2
 8002872:	18d2      	adds	r2, r2, r3
 8002874:	2300      	movs	r3, #0
 8002876:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002878:	2300      	movs	r3, #0
 800287a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
 8002886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4313      	orrs	r3, r2
 8002892:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8002894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002896:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002898:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800289a:	4313      	orrs	r3, r2
 800289c:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800289e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4bba      	ldr	r3, [pc, #744]	; (8002b90 <UART_SetConfig+0x330>)
 80028a6:	401a      	ands	r2, r3
 80028a8:	0011      	movs	r1, r2
 80028aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4bb6      	ldr	r3, [pc, #728]	; (8002b94 <UART_SetConfig+0x334>)
 80028bc:	401a      	ands	r2, r3
 80028be:	0010      	movs	r0, r2
 80028c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c2:	68d9      	ldr	r1, [r3, #12]
 80028c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	0003      	movs	r3, r0
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4baf      	ldr	r3, [pc, #700]	; (8002b98 <UART_SetConfig+0x338>)
 80028da:	429a      	cmp	r2, r3
 80028dc:	d004      	beq.n	80028e8 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e0:	6a1a      	ldr	r2, [r3, #32]
 80028e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e4:	4313      	orrs	r3, r2
 80028e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	4bab      	ldr	r3, [pc, #684]	; (8002b9c <UART_SetConfig+0x33c>)
 80028f0:	401a      	ands	r2, r3
 80028f2:	0011      	movs	r1, r2
 80028f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028fa:	430b      	orrs	r3, r1
 80028fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80028fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002904:	230f      	movs	r3, #15
 8002906:	439a      	bics	r2, r3
 8002908:	0010      	movs	r0, r2
 800290a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800290e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	0003      	movs	r3, r0
 8002914:	430b      	orrs	r3, r1
 8002916:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4ba0      	ldr	r3, [pc, #640]	; (8002ba0 <UART_SetConfig+0x340>)
 800291e:	429a      	cmp	r2, r3
 8002920:	d12f      	bne.n	8002982 <UART_SetConfig+0x122>
 8002922:	4ba0      	ldr	r3, [pc, #640]	; (8002ba4 <UART_SetConfig+0x344>)
 8002924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002926:	2303      	movs	r3, #3
 8002928:	4013      	ands	r3, r2
 800292a:	2b01      	cmp	r3, #1
 800292c:	d013      	beq.n	8002956 <UART_SetConfig+0xf6>
 800292e:	d304      	bcc.n	800293a <UART_SetConfig+0xda>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d009      	beq.n	8002948 <UART_SetConfig+0xe8>
 8002934:	2b03      	cmp	r3, #3
 8002936:	d015      	beq.n	8002964 <UART_SetConfig+0x104>
 8002938:	e01b      	b.n	8002972 <UART_SetConfig+0x112>
 800293a:	2323      	movs	r3, #35	; 0x23
 800293c:	2258      	movs	r2, #88	; 0x58
 800293e:	18ba      	adds	r2, r7, r2
 8002940:	18d2      	adds	r2, r2, r3
 8002942:	2300      	movs	r3, #0
 8002944:	7013      	strb	r3, [r2, #0]
 8002946:	e0b4      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002948:	2323      	movs	r3, #35	; 0x23
 800294a:	2258      	movs	r2, #88	; 0x58
 800294c:	18ba      	adds	r2, r7, r2
 800294e:	18d2      	adds	r2, r2, r3
 8002950:	2302      	movs	r3, #2
 8002952:	7013      	strb	r3, [r2, #0]
 8002954:	e0ad      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002956:	2323      	movs	r3, #35	; 0x23
 8002958:	2258      	movs	r2, #88	; 0x58
 800295a:	18ba      	adds	r2, r7, r2
 800295c:	18d2      	adds	r2, r2, r3
 800295e:	2304      	movs	r3, #4
 8002960:	7013      	strb	r3, [r2, #0]
 8002962:	e0a6      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002964:	2323      	movs	r3, #35	; 0x23
 8002966:	2258      	movs	r2, #88	; 0x58
 8002968:	18ba      	adds	r2, r7, r2
 800296a:	18d2      	adds	r2, r2, r3
 800296c:	2308      	movs	r3, #8
 800296e:	7013      	strb	r3, [r2, #0]
 8002970:	e09f      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002972:	2323      	movs	r3, #35	; 0x23
 8002974:	2258      	movs	r2, #88	; 0x58
 8002976:	18ba      	adds	r2, r7, r2
 8002978:	18d2      	adds	r2, r2, r3
 800297a:	2310      	movs	r3, #16
 800297c:	7013      	strb	r3, [r2, #0]
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	e097      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <UART_SetConfig+0x348>)
 8002988:	429a      	cmp	r2, r3
 800298a:	d132      	bne.n	80029f2 <UART_SetConfig+0x192>
 800298c:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <UART_SetConfig+0x344>)
 800298e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002990:	230c      	movs	r3, #12
 8002992:	4013      	ands	r3, r2
 8002994:	2b04      	cmp	r3, #4
 8002996:	d016      	beq.n	80029c6 <UART_SetConfig+0x166>
 8002998:	d802      	bhi.n	80029a0 <UART_SetConfig+0x140>
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <UART_SetConfig+0x14a>
 800299e:	e020      	b.n	80029e2 <UART_SetConfig+0x182>
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d009      	beq.n	80029b8 <UART_SetConfig+0x158>
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d015      	beq.n	80029d4 <UART_SetConfig+0x174>
 80029a8:	e01b      	b.n	80029e2 <UART_SetConfig+0x182>
 80029aa:	2323      	movs	r3, #35	; 0x23
 80029ac:	2258      	movs	r2, #88	; 0x58
 80029ae:	18ba      	adds	r2, r7, r2
 80029b0:	18d2      	adds	r2, r2, r3
 80029b2:	2300      	movs	r3, #0
 80029b4:	7013      	strb	r3, [r2, #0]
 80029b6:	e07c      	b.n	8002ab2 <UART_SetConfig+0x252>
 80029b8:	2323      	movs	r3, #35	; 0x23
 80029ba:	2258      	movs	r2, #88	; 0x58
 80029bc:	18ba      	adds	r2, r7, r2
 80029be:	18d2      	adds	r2, r2, r3
 80029c0:	2302      	movs	r3, #2
 80029c2:	7013      	strb	r3, [r2, #0]
 80029c4:	e075      	b.n	8002ab2 <UART_SetConfig+0x252>
 80029c6:	2323      	movs	r3, #35	; 0x23
 80029c8:	2258      	movs	r2, #88	; 0x58
 80029ca:	18ba      	adds	r2, r7, r2
 80029cc:	18d2      	adds	r2, r2, r3
 80029ce:	2304      	movs	r3, #4
 80029d0:	7013      	strb	r3, [r2, #0]
 80029d2:	e06e      	b.n	8002ab2 <UART_SetConfig+0x252>
 80029d4:	2323      	movs	r3, #35	; 0x23
 80029d6:	2258      	movs	r2, #88	; 0x58
 80029d8:	18ba      	adds	r2, r7, r2
 80029da:	18d2      	adds	r2, r2, r3
 80029dc:	2308      	movs	r3, #8
 80029de:	7013      	strb	r3, [r2, #0]
 80029e0:	e067      	b.n	8002ab2 <UART_SetConfig+0x252>
 80029e2:	2323      	movs	r3, #35	; 0x23
 80029e4:	2258      	movs	r2, #88	; 0x58
 80029e6:	18ba      	adds	r2, r7, r2
 80029e8:	18d2      	adds	r2, r2, r3
 80029ea:	2310      	movs	r3, #16
 80029ec:	7013      	strb	r3, [r2, #0]
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	e05f      	b.n	8002ab2 <UART_SetConfig+0x252>
 80029f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <UART_SetConfig+0x34c>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d106      	bne.n	8002a0a <UART_SetConfig+0x1aa>
 80029fc:	2323      	movs	r3, #35	; 0x23
 80029fe:	2258      	movs	r2, #88	; 0x58
 8002a00:	18ba      	adds	r2, r7, r2
 8002a02:	18d2      	adds	r2, r2, r3
 8002a04:	2300      	movs	r3, #0
 8002a06:	7013      	strb	r3, [r2, #0]
 8002a08:	e053      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <UART_SetConfig+0x350>)
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d106      	bne.n	8002a22 <UART_SetConfig+0x1c2>
 8002a14:	2323      	movs	r3, #35	; 0x23
 8002a16:	2258      	movs	r2, #88	; 0x58
 8002a18:	18ba      	adds	r2, r7, r2
 8002a1a:	18d2      	adds	r2, r2, r3
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	7013      	strb	r3, [r2, #0]
 8002a20:	e047      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b5c      	ldr	r3, [pc, #368]	; (8002b98 <UART_SetConfig+0x338>)
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d13c      	bne.n	8002aa6 <UART_SetConfig+0x246>
 8002a2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <UART_SetConfig+0x344>)
 8002a2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a30:	23c0      	movs	r3, #192	; 0xc0
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	401a      	ands	r2, r3
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d01d      	beq.n	8002a7a <UART_SetConfig+0x21a>
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d802      	bhi.n	8002a4c <UART_SetConfig+0x1ec>
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d009      	beq.n	8002a5e <UART_SetConfig+0x1fe>
 8002a4a:	e024      	b.n	8002a96 <UART_SetConfig+0x236>
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d00b      	beq.n	8002a6c <UART_SetConfig+0x20c>
 8002a54:	23c0      	movs	r3, #192	; 0xc0
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d015      	beq.n	8002a88 <UART_SetConfig+0x228>
 8002a5c:	e01b      	b.n	8002a96 <UART_SetConfig+0x236>
 8002a5e:	2323      	movs	r3, #35	; 0x23
 8002a60:	2258      	movs	r2, #88	; 0x58
 8002a62:	18ba      	adds	r2, r7, r2
 8002a64:	18d2      	adds	r2, r2, r3
 8002a66:	2300      	movs	r3, #0
 8002a68:	7013      	strb	r3, [r2, #0]
 8002a6a:	e022      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002a6c:	2323      	movs	r3, #35	; 0x23
 8002a6e:	2258      	movs	r2, #88	; 0x58
 8002a70:	18ba      	adds	r2, r7, r2
 8002a72:	18d2      	adds	r2, r2, r3
 8002a74:	2302      	movs	r3, #2
 8002a76:	7013      	strb	r3, [r2, #0]
 8002a78:	e01b      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002a7a:	2323      	movs	r3, #35	; 0x23
 8002a7c:	2258      	movs	r2, #88	; 0x58
 8002a7e:	18ba      	adds	r2, r7, r2
 8002a80:	18d2      	adds	r2, r2, r3
 8002a82:	2304      	movs	r3, #4
 8002a84:	7013      	strb	r3, [r2, #0]
 8002a86:	e014      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002a88:	2323      	movs	r3, #35	; 0x23
 8002a8a:	2258      	movs	r2, #88	; 0x58
 8002a8c:	18ba      	adds	r2, r7, r2
 8002a8e:	18d2      	adds	r2, r2, r3
 8002a90:	2308      	movs	r3, #8
 8002a92:	7013      	strb	r3, [r2, #0]
 8002a94:	e00d      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002a96:	2323      	movs	r3, #35	; 0x23
 8002a98:	2258      	movs	r2, #88	; 0x58
 8002a9a:	18ba      	adds	r2, r7, r2
 8002a9c:	18d2      	adds	r2, r2, r3
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	7013      	strb	r3, [r2, #0]
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	e005      	b.n	8002ab2 <UART_SetConfig+0x252>
 8002aa6:	2323      	movs	r3, #35	; 0x23
 8002aa8:	2258      	movs	r2, #88	; 0x58
 8002aaa:	18ba      	adds	r2, r7, r2
 8002aac:	18d2      	adds	r2, r2, r3
 8002aae:	2310      	movs	r3, #16
 8002ab0:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <UART_SetConfig+0x338>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <UART_SetConfig+0x260>
 8002abc:	f000 fbd0 	bl	8003260 <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ac0:	2323      	movs	r3, #35	; 0x23
 8002ac2:	2258      	movs	r2, #88	; 0x58
 8002ac4:	4694      	mov	ip, r2
 8002ac6:	44bc      	add	ip, r7
 8002ac8:	4463      	add	r3, ip
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d100      	bne.n	8002ad2 <UART_SetConfig+0x272>
 8002ad0:	e070      	b.n	8002bb4 <UART_SetConfig+0x354>
 8002ad2:	dc02      	bgt.n	8002ada <UART_SetConfig+0x27a>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <UART_SetConfig+0x288>
 8002ad8:	e15f      	b.n	8002d9a <UART_SetConfig+0x53a>
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d100      	bne.n	8002ae0 <UART_SetConfig+0x280>
 8002ade:	e0b4      	b.n	8002c4a <UART_SetConfig+0x3ea>
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d100      	bne.n	8002ae6 <UART_SetConfig+0x286>
 8002ae4:	e105      	b.n	8002cf2 <UART_SetConfig+0x492>
 8002ae6:	e158      	b.n	8002d9a <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002ae8:	f7ff f968 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002aec:	0002      	movs	r2, r0
 8002aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d044      	beq.n	8002b80 <UART_SetConfig+0x320>
 8002af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d03e      	beq.n	8002b7c <UART_SetConfig+0x31c>
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d038      	beq.n	8002b78 <UART_SetConfig+0x318>
 8002b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d032      	beq.n	8002b74 <UART_SetConfig+0x314>
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d02c      	beq.n	8002b70 <UART_SetConfig+0x310>
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b05      	cmp	r3, #5
 8002b1c:	d026      	beq.n	8002b6c <UART_SetConfig+0x30c>
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d020      	beq.n	8002b68 <UART_SetConfig+0x308>
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	d01a      	beq.n	8002b64 <UART_SetConfig+0x304>
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d014      	beq.n	8002b60 <UART_SetConfig+0x300>
 8002b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b09      	cmp	r3, #9
 8002b3c:	d00e      	beq.n	8002b5c <UART_SetConfig+0x2fc>
 8002b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2b0a      	cmp	r3, #10
 8002b44:	d008      	beq.n	8002b58 <UART_SetConfig+0x2f8>
 8002b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2b0b      	cmp	r3, #11
 8002b4c:	d102      	bne.n	8002b54 <UART_SetConfig+0x2f4>
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	e016      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e014      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	e012      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b5c:	2340      	movs	r3, #64	; 0x40
 8002b5e:	e010      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b60:	2320      	movs	r3, #32
 8002b62:	e00e      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b64:	2310      	movs	r3, #16
 8002b66:	e00c      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b68:	230c      	movs	r3, #12
 8002b6a:	e00a      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b6c:	230a      	movs	r3, #10
 8002b6e:	e008      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b70:	2308      	movs	r3, #8
 8002b72:	e006      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b74:	2306      	movs	r3, #6
 8002b76:	e004      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	e002      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e000      	b.n	8002b82 <UART_SetConfig+0x322>
 8002b80:	2301      	movs	r3, #1
 8002b82:	0019      	movs	r1, r3
 8002b84:	0010      	movs	r0, r2
 8002b86:	f7fd fabd 	bl	8000104 <__udivsi3>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002b8e:	e10b      	b.n	8002da8 <UART_SetConfig+0x548>
 8002b90:	cfff69f3 	.word	0xcfff69f3
 8002b94:	ffffcfff 	.word	0xffffcfff
 8002b98:	40008000 	.word	0x40008000
 8002b9c:	11fff4ff 	.word	0x11fff4ff
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	40004800 	.word	0x40004800
 8002bb0:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d043      	beq.n	8002c44 <UART_SetConfig+0x3e4>
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d03d      	beq.n	8002c40 <UART_SetConfig+0x3e0>
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d037      	beq.n	8002c3c <UART_SetConfig+0x3dc>
 8002bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d031      	beq.n	8002c38 <UART_SetConfig+0x3d8>
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d02b      	beq.n	8002c34 <UART_SetConfig+0x3d4>
 8002bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b05      	cmp	r3, #5
 8002be2:	d025      	beq.n	8002c30 <UART_SetConfig+0x3d0>
 8002be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d01f      	beq.n	8002c2c <UART_SetConfig+0x3cc>
 8002bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b07      	cmp	r3, #7
 8002bf2:	d019      	beq.n	8002c28 <UART_SetConfig+0x3c8>
 8002bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d013      	beq.n	8002c24 <UART_SetConfig+0x3c4>
 8002bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2b09      	cmp	r3, #9
 8002c02:	d00d      	beq.n	8002c20 <UART_SetConfig+0x3c0>
 8002c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2b0a      	cmp	r3, #10
 8002c0a:	d007      	beq.n	8002c1c <UART_SetConfig+0x3bc>
 8002c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b0b      	cmp	r3, #11
 8002c12:	d101      	bne.n	8002c18 <UART_SetConfig+0x3b8>
 8002c14:	4bab      	ldr	r3, [pc, #684]	; (8002ec4 <UART_SetConfig+0x664>)
 8002c16:	e016      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c18:	4bab      	ldr	r3, [pc, #684]	; (8002ec8 <UART_SetConfig+0x668>)
 8002c1a:	e014      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c1c:	4bab      	ldr	r3, [pc, #684]	; (8002ecc <UART_SetConfig+0x66c>)
 8002c1e:	e012      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c20:	4bab      	ldr	r3, [pc, #684]	; (8002ed0 <UART_SetConfig+0x670>)
 8002c22:	e010      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c24:	4bab      	ldr	r3, [pc, #684]	; (8002ed4 <UART_SetConfig+0x674>)
 8002c26:	e00e      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c28:	4bab      	ldr	r3, [pc, #684]	; (8002ed8 <UART_SetConfig+0x678>)
 8002c2a:	e00c      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c2c:	4bab      	ldr	r3, [pc, #684]	; (8002edc <UART_SetConfig+0x67c>)
 8002c2e:	e00a      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c30:	4bab      	ldr	r3, [pc, #684]	; (8002ee0 <UART_SetConfig+0x680>)
 8002c32:	e008      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c34:	4bab      	ldr	r3, [pc, #684]	; (8002ee4 <UART_SetConfig+0x684>)
 8002c36:	e006      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c38:	4bab      	ldr	r3, [pc, #684]	; (8002ee8 <UART_SetConfig+0x688>)
 8002c3a:	e004      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c3c:	4bab      	ldr	r3, [pc, #684]	; (8002eec <UART_SetConfig+0x68c>)
 8002c3e:	e002      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c40:	4bab      	ldr	r3, [pc, #684]	; (8002ef0 <UART_SetConfig+0x690>)
 8002c42:	e000      	b.n	8002c46 <UART_SetConfig+0x3e6>
 8002c44:	4ba0      	ldr	r3, [pc, #640]	; (8002ec8 <UART_SetConfig+0x668>)
 8002c46:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002c48:	e0ae      	b.n	8002da8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002c4a:	f7ff f82b 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d044      	beq.n	8002ce2 <UART_SetConfig+0x482>
 8002c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d03e      	beq.n	8002cde <UART_SetConfig+0x47e>
 8002c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d038      	beq.n	8002cda <UART_SetConfig+0x47a>
 8002c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d032      	beq.n	8002cd6 <UART_SetConfig+0x476>
 8002c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d02c      	beq.n	8002cd2 <UART_SetConfig+0x472>
 8002c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d026      	beq.n	8002cce <UART_SetConfig+0x46e>
 8002c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d020      	beq.n	8002cca <UART_SetConfig+0x46a>
 8002c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2b07      	cmp	r3, #7
 8002c8e:	d01a      	beq.n	8002cc6 <UART_SetConfig+0x466>
 8002c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d014      	beq.n	8002cc2 <UART_SetConfig+0x462>
 8002c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	d00e      	beq.n	8002cbe <UART_SetConfig+0x45e>
 8002ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2b0a      	cmp	r3, #10
 8002ca6:	d008      	beq.n	8002cba <UART_SetConfig+0x45a>
 8002ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2b0b      	cmp	r3, #11
 8002cae:	d102      	bne.n	8002cb6 <UART_SetConfig+0x456>
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	e016      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e014      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	e012      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cbe:	2340      	movs	r3, #64	; 0x40
 8002cc0:	e010      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	e00e      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	e00c      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cca:	230c      	movs	r3, #12
 8002ccc:	e00a      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cce:	230a      	movs	r3, #10
 8002cd0:	e008      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	e006      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	e004      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	e002      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e000      	b.n	8002ce4 <UART_SetConfig+0x484>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	0010      	movs	r0, r2
 8002ce8:	f7fd fa0c 	bl	8000104 <__udivsi3>
 8002cec:	0003      	movs	r3, r0
 8002cee:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002cf0:	e05a      	b.n	8002da8 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d04b      	beq.n	8002d92 <UART_SetConfig+0x532>
 8002cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d044      	beq.n	8002d8c <UART_SetConfig+0x52c>
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d03d      	beq.n	8002d86 <UART_SetConfig+0x526>
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d037      	beq.n	8002d82 <UART_SetConfig+0x522>
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d030      	beq.n	8002d7c <UART_SetConfig+0x51c>
 8002d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d02a      	beq.n	8002d78 <UART_SetConfig+0x518>
 8002d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d024      	beq.n	8002d74 <UART_SetConfig+0x514>
 8002d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	2b07      	cmp	r3, #7
 8002d30:	d01d      	beq.n	8002d6e <UART_SetConfig+0x50e>
 8002d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d016      	beq.n	8002d68 <UART_SetConfig+0x508>
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	d00f      	beq.n	8002d62 <UART_SetConfig+0x502>
 8002d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b0a      	cmp	r3, #10
 8002d48:	d008      	beq.n	8002d5c <UART_SetConfig+0x4fc>
 8002d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2b0b      	cmp	r3, #11
 8002d50:	d101      	bne.n	8002d56 <UART_SetConfig+0x4f6>
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	e01f      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	e01c      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	e019      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	e016      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	e013      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	e010      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d74:	4b5f      	ldr	r3, [pc, #380]	; (8002ef4 <UART_SetConfig+0x694>)
 8002d76:	e00e      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d78:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <UART_SetConfig+0x698>)
 8002d7a:	e00c      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	015b      	lsls	r3, r3, #5
 8002d80:	e009      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d82:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <UART_SetConfig+0x69c>)
 8002d84:	e007      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	e004      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	01db      	lsls	r3, r3, #7
 8002d90:	e001      	b.n	8002d96 <UART_SetConfig+0x536>
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8002d98:	e006      	b.n	8002da8 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8002d9a:	231b      	movs	r3, #27
 8002d9c:	2258      	movs	r2, #88	; 0x58
 8002d9e:	18ba      	adds	r2, r7, r2
 8002da0:	18d2      	adds	r2, r2, r3
 8002da2:	2301      	movs	r3, #1
 8002da4:	7013      	strb	r3, [r2, #0]
        break;
 8002da6:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <UART_SetConfig+0x552>
 8002dae:	f000 fe12 	bl	80039d6 <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	0013      	movs	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	189a      	adds	r2, r3, r2
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d305      	bcc.n	8002dce <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d908      	bls.n	8002de0 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8002dce:	231b      	movs	r3, #27
 8002dd0:	2258      	movs	r2, #88	; 0x58
 8002dd2:	4694      	mov	ip, r2
 8002dd4:	44bc      	add	ip, r7
 8002dd6:	4463      	add	r3, ip
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	f000 fdfb 	bl	80039d6 <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 8002de0:	2323      	movs	r3, #35	; 0x23
 8002de2:	2258      	movs	r2, #88	; 0x58
 8002de4:	4694      	mov	ip, r2
 8002de6:	44bc      	add	ip, r7
 8002de8:	4463      	add	r3, ip
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d100      	bne.n	8002df2 <UART_SetConfig+0x592>
 8002df0:	e0ab      	b.n	8002f4a <UART_SetConfig+0x6ea>
 8002df2:	dc02      	bgt.n	8002dfa <UART_SetConfig+0x59a>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <UART_SetConfig+0x5a8>
 8002df8:	e213      	b.n	8003222 <UART_SetConfig+0x9c2>
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d100      	bne.n	8002e00 <UART_SetConfig+0x5a0>
 8002dfe:	e111      	b.n	8003024 <UART_SetConfig+0x7c4>
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d100      	bne.n	8002e06 <UART_SetConfig+0x5a6>
 8002e04:	e196      	b.n	8003134 <UART_SetConfig+0x8d4>
 8002e06:	e20c      	b.n	8003222 <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002e08:	f7fe ffd8 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e14:	2300      	movs	r3, #0
 8002e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d100      	bne.n	8002e22 <UART_SetConfig+0x5c2>
 8002e20:	e06e      	b.n	8002f00 <UART_SetConfig+0x6a0>
 8002e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d049      	beq.n	8002ebe <UART_SetConfig+0x65e>
 8002e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d042      	beq.n	8002eb8 <UART_SetConfig+0x658>
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d03b      	beq.n	8002eb2 <UART_SetConfig+0x652>
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d034      	beq.n	8002eac <UART_SetConfig+0x64c>
 8002e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d02d      	beq.n	8002ea6 <UART_SetConfig+0x646>
 8002e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d026      	beq.n	8002ea0 <UART_SetConfig+0x640>
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	2b07      	cmp	r3, #7
 8002e58:	d01f      	beq.n	8002e9a <UART_SetConfig+0x63a>
 8002e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d018      	beq.n	8002e94 <UART_SetConfig+0x634>
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	2b09      	cmp	r3, #9
 8002e68:	d011      	beq.n	8002e8e <UART_SetConfig+0x62e>
 8002e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	2b0a      	cmp	r3, #10
 8002e70:	d00a      	beq.n	8002e88 <UART_SetConfig+0x628>
 8002e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b0b      	cmp	r3, #11
 8002e78:	d103      	bne.n	8002e82 <UART_SetConfig+0x622>
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2400      	movs	r4, #0
 8002e80:	e040      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002e82:	2301      	movs	r3, #1
 8002e84:	2400      	movs	r4, #0
 8002e86:	e03d      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	2400      	movs	r4, #0
 8002e8c:	e03a      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	2400      	movs	r4, #0
 8002e92:	e037      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002e94:	2320      	movs	r3, #32
 8002e96:	2400      	movs	r4, #0
 8002e98:	e034      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002e9a:	2310      	movs	r3, #16
 8002e9c:	2400      	movs	r4, #0
 8002e9e:	e031      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002ea0:	230c      	movs	r3, #12
 8002ea2:	2400      	movs	r4, #0
 8002ea4:	e02e      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002ea6:	230a      	movs	r3, #10
 8002ea8:	2400      	movs	r4, #0
 8002eaa:	e02b      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002eac:	2308      	movs	r3, #8
 8002eae:	2400      	movs	r4, #0
 8002eb0:	e028      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002eb2:	2306      	movs	r3, #6
 8002eb4:	2400      	movs	r4, #0
 8002eb6:	e025      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	2400      	movs	r4, #0
 8002ebc:	e022      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	2400      	movs	r4, #0
 8002ec2:	e01f      	b.n	8002f04 <UART_SetConfig+0x6a4>
 8002ec4:	0000f424 	.word	0x0000f424
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	0001e848 	.word	0x0001e848
 8002ed0:	0003d090 	.word	0x0003d090
 8002ed4:	0007a120 	.word	0x0007a120
 8002ed8:	000f4240 	.word	0x000f4240
 8002edc:	00145855 	.word	0x00145855
 8002ee0:	00186a00 	.word	0x00186a00
 8002ee4:	001e8480 	.word	0x001e8480
 8002ee8:	0028b0aa 	.word	0x0028b0aa
 8002eec:	003d0900 	.word	0x003d0900
 8002ef0:	007a1200 	.word	0x007a1200
 8002ef4:	00000aaa 	.word	0x00000aaa
 8002ef8:	00000ccc 	.word	0x00000ccc
 8002efc:	00001555 	.word	0x00001555
 8002f00:	2301      	movs	r3, #1
 8002f02:	2400      	movs	r4, #0
 8002f04:	001a      	movs	r2, r3
 8002f06:	0023      	movs	r3, r4
 8002f08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f0a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f0c:	f7fd fa70 	bl	80003f0 <__aeabi_uldivmod>
 8002f10:	0003      	movs	r3, r0
 8002f12:	000c      	movs	r4, r1
 8002f14:	0e1a      	lsrs	r2, r3, #24
 8002f16:	0226      	lsls	r6, r4, #8
 8002f18:	4316      	orrs	r6, r2
 8002f1a:	021d      	lsls	r5, r3, #8
 8002f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	643b      	str	r3, [r7, #64]	; 0x40
 8002f24:	2300      	movs	r3, #0
 8002f26:	647b      	str	r3, [r7, #68]	; 0x44
 8002f28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f2c:	1940      	adds	r0, r0, r5
 8002f2e:	4171      	adcs	r1, r6
 8002f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f36:	2300      	movs	r3, #0
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3e:	f7fd fa57 	bl	80003f0 <__aeabi_uldivmod>
 8002f42:	0003      	movs	r3, r0
 8002f44:	000c      	movs	r4, r1
 8002f46:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8002f48:	e173      	b.n	8003232 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d04f      	beq.n	8002ff2 <UART_SetConfig+0x792>
 8002f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d048      	beq.n	8002fec <UART_SetConfig+0x78c>
 8002f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d041      	beq.n	8002fe6 <UART_SetConfig+0x786>
 8002f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d03a      	beq.n	8002fe0 <UART_SetConfig+0x780>
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d033      	beq.n	8002fda <UART_SetConfig+0x77a>
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d02c      	beq.n	8002fd4 <UART_SetConfig+0x774>
 8002f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d025      	beq.n	8002fce <UART_SetConfig+0x76e>
 8002f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b07      	cmp	r3, #7
 8002f88:	d01e      	beq.n	8002fc8 <UART_SetConfig+0x768>
 8002f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d017      	beq.n	8002fc2 <UART_SetConfig+0x762>
 8002f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d010      	beq.n	8002fbc <UART_SetConfig+0x75c>
 8002f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b0a      	cmp	r3, #10
 8002fa0:	d009      	beq.n	8002fb6 <UART_SetConfig+0x756>
 8002fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b0b      	cmp	r3, #11
 8002fa8:	d102      	bne.n	8002fb0 <UART_SetConfig+0x750>
 8002faa:	4bbb      	ldr	r3, [pc, #748]	; (8003298 <UART_SetConfig+0xa38>)
 8002fac:	2400      	movs	r4, #0
 8002fae:	e022      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fb0:	4bba      	ldr	r3, [pc, #744]	; (800329c <UART_SetConfig+0xa3c>)
 8002fb2:	2400      	movs	r4, #0
 8002fb4:	e01f      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fb6:	4bba      	ldr	r3, [pc, #744]	; (80032a0 <UART_SetConfig+0xa40>)
 8002fb8:	2400      	movs	r4, #0
 8002fba:	e01c      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fbc:	4bb9      	ldr	r3, [pc, #740]	; (80032a4 <UART_SetConfig+0xa44>)
 8002fbe:	2400      	movs	r4, #0
 8002fc0:	e019      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fc2:	4bb9      	ldr	r3, [pc, #740]	; (80032a8 <UART_SetConfig+0xa48>)
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	e016      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fc8:	4bb8      	ldr	r3, [pc, #736]	; (80032ac <UART_SetConfig+0xa4c>)
 8002fca:	2400      	movs	r4, #0
 8002fcc:	e013      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fce:	4bb8      	ldr	r3, [pc, #736]	; (80032b0 <UART_SetConfig+0xa50>)
 8002fd0:	2400      	movs	r4, #0
 8002fd2:	e010      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fd4:	4bb7      	ldr	r3, [pc, #732]	; (80032b4 <UART_SetConfig+0xa54>)
 8002fd6:	2400      	movs	r4, #0
 8002fd8:	e00d      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fda:	4bb7      	ldr	r3, [pc, #732]	; (80032b8 <UART_SetConfig+0xa58>)
 8002fdc:	2400      	movs	r4, #0
 8002fde:	e00a      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fe0:	4bb6      	ldr	r3, [pc, #728]	; (80032bc <UART_SetConfig+0xa5c>)
 8002fe2:	2400      	movs	r4, #0
 8002fe4:	e007      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fe6:	4bb6      	ldr	r3, [pc, #728]	; (80032c0 <UART_SetConfig+0xa60>)
 8002fe8:	2400      	movs	r4, #0
 8002fea:	e004      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002fec:	4bb5      	ldr	r3, [pc, #724]	; (80032c4 <UART_SetConfig+0xa64>)
 8002fee:	2400      	movs	r4, #0
 8002ff0:	e001      	b.n	8002ff6 <UART_SetConfig+0x796>
 8002ff2:	4baa      	ldr	r3, [pc, #680]	; (800329c <UART_SetConfig+0xa3c>)
 8002ff4:	2400      	movs	r4, #0
 8002ff6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ff8:	6852      	ldr	r2, [r2, #4]
 8002ffa:	0852      	lsrs	r2, r2, #1
 8002ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8002ffe:	2200      	movs	r2, #0
 8003000:	637a      	str	r2, [r7, #52]	; 0x34
 8003002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003004:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003006:	18c0      	adds	r0, r0, r3
 8003008:	4161      	adcs	r1, r4
 800300a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003010:	2300      	movs	r3, #0
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	f7fd f9ea 	bl	80003f0 <__aeabi_uldivmod>
 800301c:	0003      	movs	r3, r0
 800301e:	000c      	movs	r4, r1
 8003020:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8003022:	e106      	b.n	8003232 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003024:	f7fe fe3e 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003028:	0003      	movs	r3, r0
 800302a:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800302c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
 8003034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2b00      	cmp	r3, #0
 800303a:	d050      	beq.n	80030de <UART_SetConfig+0x87e>
 800303c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	2b01      	cmp	r3, #1
 8003042:	d049      	beq.n	80030d8 <UART_SetConfig+0x878>
 8003044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b02      	cmp	r3, #2
 800304a:	d042      	beq.n	80030d2 <UART_SetConfig+0x872>
 800304c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2b03      	cmp	r3, #3
 8003052:	d03b      	beq.n	80030cc <UART_SetConfig+0x86c>
 8003054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b04      	cmp	r3, #4
 800305a:	d034      	beq.n	80030c6 <UART_SetConfig+0x866>
 800305c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b05      	cmp	r3, #5
 8003062:	d02d      	beq.n	80030c0 <UART_SetConfig+0x860>
 8003064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b06      	cmp	r3, #6
 800306a:	d026      	beq.n	80030ba <UART_SetConfig+0x85a>
 800306c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b07      	cmp	r3, #7
 8003072:	d01f      	beq.n	80030b4 <UART_SetConfig+0x854>
 8003074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b08      	cmp	r3, #8
 800307a:	d018      	beq.n	80030ae <UART_SetConfig+0x84e>
 800307c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b09      	cmp	r3, #9
 8003082:	d011      	beq.n	80030a8 <UART_SetConfig+0x848>
 8003084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2b0a      	cmp	r3, #10
 800308a:	d00a      	beq.n	80030a2 <UART_SetConfig+0x842>
 800308c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b0b      	cmp	r3, #11
 8003092:	d103      	bne.n	800309c <UART_SetConfig+0x83c>
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2400      	movs	r4, #0
 800309a:	e022      	b.n	80030e2 <UART_SetConfig+0x882>
 800309c:	2301      	movs	r3, #1
 800309e:	2400      	movs	r4, #0
 80030a0:	e01f      	b.n	80030e2 <UART_SetConfig+0x882>
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	2400      	movs	r4, #0
 80030a6:	e01c      	b.n	80030e2 <UART_SetConfig+0x882>
 80030a8:	2340      	movs	r3, #64	; 0x40
 80030aa:	2400      	movs	r4, #0
 80030ac:	e019      	b.n	80030e2 <UART_SetConfig+0x882>
 80030ae:	2320      	movs	r3, #32
 80030b0:	2400      	movs	r4, #0
 80030b2:	e016      	b.n	80030e2 <UART_SetConfig+0x882>
 80030b4:	2310      	movs	r3, #16
 80030b6:	2400      	movs	r4, #0
 80030b8:	e013      	b.n	80030e2 <UART_SetConfig+0x882>
 80030ba:	230c      	movs	r3, #12
 80030bc:	2400      	movs	r4, #0
 80030be:	e010      	b.n	80030e2 <UART_SetConfig+0x882>
 80030c0:	230a      	movs	r3, #10
 80030c2:	2400      	movs	r4, #0
 80030c4:	e00d      	b.n	80030e2 <UART_SetConfig+0x882>
 80030c6:	2308      	movs	r3, #8
 80030c8:	2400      	movs	r4, #0
 80030ca:	e00a      	b.n	80030e2 <UART_SetConfig+0x882>
 80030cc:	2306      	movs	r3, #6
 80030ce:	2400      	movs	r4, #0
 80030d0:	e007      	b.n	80030e2 <UART_SetConfig+0x882>
 80030d2:	2304      	movs	r3, #4
 80030d4:	2400      	movs	r4, #0
 80030d6:	e004      	b.n	80030e2 <UART_SetConfig+0x882>
 80030d8:	2302      	movs	r3, #2
 80030da:	2400      	movs	r4, #0
 80030dc:	e001      	b.n	80030e2 <UART_SetConfig+0x882>
 80030de:	2301      	movs	r3, #1
 80030e0:	2400      	movs	r4, #0
 80030e2:	001a      	movs	r2, r3
 80030e4:	0023      	movs	r3, r4
 80030e6:	6a38      	ldr	r0, [r7, #32]
 80030e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ea:	f7fd f981 	bl	80003f0 <__aeabi_uldivmod>
 80030ee:	0003      	movs	r3, r0
 80030f0:	000c      	movs	r4, r1
 80030f2:	0e1a      	lsrs	r2, r3, #24
 80030f4:	0221      	lsls	r1, r4, #8
 80030f6:	6579      	str	r1, [r7, #84]	; 0x54
 80030f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030fa:	4311      	orrs	r1, r2
 80030fc:	6579      	str	r1, [r7, #84]	; 0x54
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	653b      	str	r3, [r7, #80]	; 0x50
 8003102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	69fc      	ldr	r4, [r7, #28]
 8003116:	18c0      	adds	r0, r0, r3
 8003118:	4161      	adcs	r1, r4
 800311a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f7fd f962 	bl	80003f0 <__aeabi_uldivmod>
 800312c:	0003      	movs	r3, r0
 800312e:	000c      	movs	r4, r1
 8003130:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8003132:	e07e      	b.n	8003232 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d058      	beq.n	80031ee <UART_SetConfig+0x98e>
 800313c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b01      	cmp	r3, #1
 8003142:	d050      	beq.n	80031e6 <UART_SetConfig+0x986>
 8003144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2b02      	cmp	r3, #2
 800314a:	d048      	beq.n	80031de <UART_SetConfig+0x97e>
 800314c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	2b03      	cmp	r3, #3
 8003152:	d041      	beq.n	80031d8 <UART_SetConfig+0x978>
 8003154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	2b04      	cmp	r3, #4
 800315a:	d039      	beq.n	80031d0 <UART_SetConfig+0x970>
 800315c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b05      	cmp	r3, #5
 8003162:	d032      	beq.n	80031ca <UART_SetConfig+0x96a>
 8003164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2b06      	cmp	r3, #6
 800316a:	d02b      	beq.n	80031c4 <UART_SetConfig+0x964>
 800316c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2b07      	cmp	r3, #7
 8003172:	d023      	beq.n	80031bc <UART_SetConfig+0x95c>
 8003174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2b08      	cmp	r3, #8
 800317a:	d01b      	beq.n	80031b4 <UART_SetConfig+0x954>
 800317c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b09      	cmp	r3, #9
 8003182:	d013      	beq.n	80031ac <UART_SetConfig+0x94c>
 8003184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2b0a      	cmp	r3, #10
 800318a:	d00b      	beq.n	80031a4 <UART_SetConfig+0x944>
 800318c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	2b0b      	cmp	r3, #11
 8003192:	d103      	bne.n	800319c <UART_SetConfig+0x93c>
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	2400      	movs	r4, #0
 800319a:	e02b      	b.n	80031f4 <UART_SetConfig+0x994>
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	2400      	movs	r4, #0
 80031a2:	e027      	b.n	80031f4 <UART_SetConfig+0x994>
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	025b      	lsls	r3, r3, #9
 80031a8:	2400      	movs	r4, #0
 80031aa:	e023      	b.n	80031f4 <UART_SetConfig+0x994>
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	029b      	lsls	r3, r3, #10
 80031b0:	2400      	movs	r4, #0
 80031b2:	e01f      	b.n	80031f4 <UART_SetConfig+0x994>
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	02db      	lsls	r3, r3, #11
 80031b8:	2400      	movs	r4, #0
 80031ba:	e01b      	b.n	80031f4 <UART_SetConfig+0x994>
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	031b      	lsls	r3, r3, #12
 80031c0:	2400      	movs	r4, #0
 80031c2:	e017      	b.n	80031f4 <UART_SetConfig+0x994>
 80031c4:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <UART_SetConfig+0xa68>)
 80031c6:	2400      	movs	r4, #0
 80031c8:	e014      	b.n	80031f4 <UART_SetConfig+0x994>
 80031ca:	4b40      	ldr	r3, [pc, #256]	; (80032cc <UART_SetConfig+0xa6c>)
 80031cc:	2400      	movs	r4, #0
 80031ce:	e011      	b.n	80031f4 <UART_SetConfig+0x994>
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	035b      	lsls	r3, r3, #13
 80031d4:	2400      	movs	r4, #0
 80031d6:	e00d      	b.n	80031f4 <UART_SetConfig+0x994>
 80031d8:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <UART_SetConfig+0xa70>)
 80031da:	2400      	movs	r4, #0
 80031dc:	e00a      	b.n	80031f4 <UART_SetConfig+0x994>
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	039b      	lsls	r3, r3, #14
 80031e2:	2400      	movs	r4, #0
 80031e4:	e006      	b.n	80031f4 <UART_SetConfig+0x994>
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	03db      	lsls	r3, r3, #15
 80031ea:	2400      	movs	r4, #0
 80031ec:	e002      	b.n	80031f4 <UART_SetConfig+0x994>
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	2400      	movs	r4, #0
 80031f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031f6:	6852      	ldr	r2, [r2, #4]
 80031f8:	0852      	lsrs	r2, r2, #1
 80031fa:	60ba      	str	r2, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	60fa      	str	r2, [r7, #12]
 8003200:	68b8      	ldr	r0, [r7, #8]
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	18c0      	adds	r0, r0, r3
 8003206:	4161      	adcs	r1, r4
 8003208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f7fd f8eb 	bl	80003f0 <__aeabi_uldivmod>
 800321a:	0003      	movs	r3, r0
 800321c:	000c      	movs	r4, r1
 800321e:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8003220:	e007      	b.n	8003232 <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 8003222:	231b      	movs	r3, #27
 8003224:	2258      	movs	r2, #88	; 0x58
 8003226:	4694      	mov	ip, r2
 8003228:	44bc      	add	ip, r7
 800322a:	4463      	add	r3, ip
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
            break;
 8003230:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003234:	4a27      	ldr	r2, [pc, #156]	; (80032d4 <UART_SetConfig+0xa74>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d909      	bls.n	800324e <UART_SetConfig+0x9ee>
 800323a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <UART_SetConfig+0xa78>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d805      	bhi.n	800324e <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 8003242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	f000 fbc4 	bl	80039d6 <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 800324e:	231b      	movs	r3, #27
 8003250:	2258      	movs	r2, #88	; 0x58
 8003252:	4694      	mov	ip, r2
 8003254:	44bc      	add	ip, r7
 8003256:	4463      	add	r3, ip
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	f000 fbbb 	bl	80039d6 <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	429a      	cmp	r2, r3
 800326a:	d000      	beq.n	800326e <UART_SetConfig+0xa0e>
 800326c:	e1e6      	b.n	800363c <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 800326e:	2323      	movs	r3, #35	; 0x23
 8003270:	2258      	movs	r2, #88	; 0x58
 8003272:	4694      	mov	ip, r2
 8003274:	44bc      	add	ip, r7
 8003276:	4463      	add	r3, ip
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d100      	bne.n	8003280 <UART_SetConfig+0xa20>
 800327e:	e08f      	b.n	80033a0 <UART_SetConfig+0xb40>
 8003280:	dc02      	bgt.n	8003288 <UART_SetConfig+0xa28>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02a      	beq.n	80032dc <UART_SetConfig+0xa7c>
 8003286:	e1a5      	b.n	80035d4 <UART_SetConfig+0xd74>
 8003288:	2b04      	cmp	r3, #4
 800328a:	d100      	bne.n	800328e <UART_SetConfig+0xa2e>
 800328c:	e0df      	b.n	800344e <UART_SetConfig+0xbee>
 800328e:	2b08      	cmp	r3, #8
 8003290:	d100      	bne.n	8003294 <UART_SetConfig+0xa34>
 8003292:	e13e      	b.n	8003512 <UART_SetConfig+0xcb2>
 8003294:	e19e      	b.n	80035d4 <UART_SetConfig+0xd74>
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	00f42400 	.word	0x00f42400
 800329c:	f4240000 	.word	0xf4240000
 80032a0:	01e84800 	.word	0x01e84800
 80032a4:	03d09000 	.word	0x03d09000
 80032a8:	07a12000 	.word	0x07a12000
 80032ac:	0f424000 	.word	0x0f424000
 80032b0:	14585500 	.word	0x14585500
 80032b4:	186a0000 	.word	0x186a0000
 80032b8:	1e848000 	.word	0x1e848000
 80032bc:	28b0aa00 	.word	0x28b0aa00
 80032c0:	3d090000 	.word	0x3d090000
 80032c4:	7a120000 	.word	0x7a120000
 80032c8:	000aaa00 	.word	0x000aaa00
 80032cc:	000ccc00 	.word	0x000ccc00
 80032d0:	00155500 	.word	0x00155500
 80032d4:	000002ff 	.word	0x000002ff
 80032d8:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe fd6e 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80032e0:	0003      	movs	r3, r0
 80032e2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d044      	beq.n	8003376 <UART_SetConfig+0xb16>
 80032ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d03e      	beq.n	8003372 <UART_SetConfig+0xb12>
 80032f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d038      	beq.n	800336e <UART_SetConfig+0xb0e>
 80032fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	2b03      	cmp	r3, #3
 8003302:	d032      	beq.n	800336a <UART_SetConfig+0xb0a>
 8003304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2b04      	cmp	r3, #4
 800330a:	d02c      	beq.n	8003366 <UART_SetConfig+0xb06>
 800330c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	2b05      	cmp	r3, #5
 8003312:	d026      	beq.n	8003362 <UART_SetConfig+0xb02>
 8003314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2b06      	cmp	r3, #6
 800331a:	d020      	beq.n	800335e <UART_SetConfig+0xafe>
 800331c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b07      	cmp	r3, #7
 8003322:	d01a      	beq.n	800335a <UART_SetConfig+0xafa>
 8003324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	2b08      	cmp	r3, #8
 800332a:	d014      	beq.n	8003356 <UART_SetConfig+0xaf6>
 800332c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	2b09      	cmp	r3, #9
 8003332:	d00e      	beq.n	8003352 <UART_SetConfig+0xaf2>
 8003334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2b0a      	cmp	r3, #10
 800333a:	d008      	beq.n	800334e <UART_SetConfig+0xaee>
 800333c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b0b      	cmp	r3, #11
 8003342:	d102      	bne.n	800334a <UART_SetConfig+0xaea>
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	e016      	b.n	8003378 <UART_SetConfig+0xb18>
 800334a:	2301      	movs	r3, #1
 800334c:	e014      	b.n	8003378 <UART_SetConfig+0xb18>
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	e012      	b.n	8003378 <UART_SetConfig+0xb18>
 8003352:	2340      	movs	r3, #64	; 0x40
 8003354:	e010      	b.n	8003378 <UART_SetConfig+0xb18>
 8003356:	2320      	movs	r3, #32
 8003358:	e00e      	b.n	8003378 <UART_SetConfig+0xb18>
 800335a:	2310      	movs	r3, #16
 800335c:	e00c      	b.n	8003378 <UART_SetConfig+0xb18>
 800335e:	230c      	movs	r3, #12
 8003360:	e00a      	b.n	8003378 <UART_SetConfig+0xb18>
 8003362:	230a      	movs	r3, #10
 8003364:	e008      	b.n	8003378 <UART_SetConfig+0xb18>
 8003366:	2308      	movs	r3, #8
 8003368:	e006      	b.n	8003378 <UART_SetConfig+0xb18>
 800336a:	2306      	movs	r3, #6
 800336c:	e004      	b.n	8003378 <UART_SetConfig+0xb18>
 800336e:	2304      	movs	r3, #4
 8003370:	e002      	b.n	8003378 <UART_SetConfig+0xb18>
 8003372:	2302      	movs	r3, #2
 8003374:	e000      	b.n	8003378 <UART_SetConfig+0xb18>
 8003376:	2301      	movs	r3, #1
 8003378:	0019      	movs	r1, r3
 800337a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800337c:	f7fc fec2 	bl	8000104 <__udivsi3>
 8003380:	0003      	movs	r3, r0
 8003382:	005a      	lsls	r2, r3, #1
 8003384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	18d2      	adds	r2, r2, r3
 800338c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0019      	movs	r1, r3
 8003392:	0010      	movs	r0, r2
 8003394:	f7fc feb6 	bl	8000104 <__udivsi3>
 8003398:	0003      	movs	r3, r0
 800339a:	b29b      	uxth	r3, r3
 800339c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800339e:	e121      	b.n	80035e4 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d043      	beq.n	8003430 <UART_SetConfig+0xbd0>
 80033a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d03d      	beq.n	800342c <UART_SetConfig+0xbcc>
 80033b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d037      	beq.n	8003428 <UART_SetConfig+0xbc8>
 80033b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d031      	beq.n	8003424 <UART_SetConfig+0xbc4>
 80033c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d02b      	beq.n	8003420 <UART_SetConfig+0xbc0>
 80033c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d025      	beq.n	800341c <UART_SetConfig+0xbbc>
 80033d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2b06      	cmp	r3, #6
 80033d6:	d01f      	beq.n	8003418 <UART_SetConfig+0xbb8>
 80033d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	2b07      	cmp	r3, #7
 80033de:	d019      	beq.n	8003414 <UART_SetConfig+0xbb4>
 80033e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d013      	beq.n	8003410 <UART_SetConfig+0xbb0>
 80033e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d00d      	beq.n	800340c <UART_SetConfig+0xbac>
 80033f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b0a      	cmp	r3, #10
 80033f6:	d007      	beq.n	8003408 <UART_SetConfig+0xba8>
 80033f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	2b0b      	cmp	r3, #11
 80033fe:	d101      	bne.n	8003404 <UART_SetConfig+0xba4>
 8003400:	4bba      	ldr	r3, [pc, #744]	; (80036ec <UART_SetConfig+0xe8c>)
 8003402:	e016      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003404:	4bba      	ldr	r3, [pc, #744]	; (80036f0 <UART_SetConfig+0xe90>)
 8003406:	e014      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003408:	4bba      	ldr	r3, [pc, #744]	; (80036f4 <UART_SetConfig+0xe94>)
 800340a:	e012      	b.n	8003432 <UART_SetConfig+0xbd2>
 800340c:	4bba      	ldr	r3, [pc, #744]	; (80036f8 <UART_SetConfig+0xe98>)
 800340e:	e010      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003410:	4bba      	ldr	r3, [pc, #744]	; (80036fc <UART_SetConfig+0xe9c>)
 8003412:	e00e      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003414:	4bba      	ldr	r3, [pc, #744]	; (8003700 <UART_SetConfig+0xea0>)
 8003416:	e00c      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003418:	4bba      	ldr	r3, [pc, #744]	; (8003704 <UART_SetConfig+0xea4>)
 800341a:	e00a      	b.n	8003432 <UART_SetConfig+0xbd2>
 800341c:	4bba      	ldr	r3, [pc, #744]	; (8003708 <UART_SetConfig+0xea8>)
 800341e:	e008      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003420:	4bba      	ldr	r3, [pc, #744]	; (800370c <UART_SetConfig+0xeac>)
 8003422:	e006      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003424:	4bba      	ldr	r3, [pc, #744]	; (8003710 <UART_SetConfig+0xeb0>)
 8003426:	e004      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003428:	4bba      	ldr	r3, [pc, #744]	; (8003714 <UART_SetConfig+0xeb4>)
 800342a:	e002      	b.n	8003432 <UART_SetConfig+0xbd2>
 800342c:	4bba      	ldr	r3, [pc, #744]	; (8003718 <UART_SetConfig+0xeb8>)
 800342e:	e000      	b.n	8003432 <UART_SetConfig+0xbd2>
 8003430:	4baf      	ldr	r3, [pc, #700]	; (80036f0 <UART_SetConfig+0xe90>)
 8003432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003434:	6852      	ldr	r2, [r2, #4]
 8003436:	0852      	lsrs	r2, r2, #1
 8003438:	189a      	adds	r2, r3, r2
 800343a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	0019      	movs	r1, r3
 8003440:	0010      	movs	r0, r2
 8003442:	f7fc fe5f 	bl	8000104 <__udivsi3>
 8003446:	0003      	movs	r3, r0
 8003448:	b29b      	uxth	r3, r3
 800344a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800344c:	e0ca      	b.n	80035e4 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344e:	f7fe fc29 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003452:	0003      	movs	r3, r0
 8003454:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	2b00      	cmp	r3, #0
 800345c:	d044      	beq.n	80034e8 <UART_SetConfig+0xc88>
 800345e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	2b01      	cmp	r3, #1
 8003464:	d03e      	beq.n	80034e4 <UART_SetConfig+0xc84>
 8003466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b02      	cmp	r3, #2
 800346c:	d038      	beq.n	80034e0 <UART_SetConfig+0xc80>
 800346e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b03      	cmp	r3, #3
 8003474:	d032      	beq.n	80034dc <UART_SetConfig+0xc7c>
 8003476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2b04      	cmp	r3, #4
 800347c:	d02c      	beq.n	80034d8 <UART_SetConfig+0xc78>
 800347e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b05      	cmp	r3, #5
 8003484:	d026      	beq.n	80034d4 <UART_SetConfig+0xc74>
 8003486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b06      	cmp	r3, #6
 800348c:	d020      	beq.n	80034d0 <UART_SetConfig+0xc70>
 800348e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b07      	cmp	r3, #7
 8003494:	d01a      	beq.n	80034cc <UART_SetConfig+0xc6c>
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b08      	cmp	r3, #8
 800349c:	d014      	beq.n	80034c8 <UART_SetConfig+0xc68>
 800349e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b09      	cmp	r3, #9
 80034a4:	d00e      	beq.n	80034c4 <UART_SetConfig+0xc64>
 80034a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b0a      	cmp	r3, #10
 80034ac:	d008      	beq.n	80034c0 <UART_SetConfig+0xc60>
 80034ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b0b      	cmp	r3, #11
 80034b4:	d102      	bne.n	80034bc <UART_SetConfig+0xc5c>
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	e016      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034bc:	2301      	movs	r3, #1
 80034be:	e014      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	e012      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	e010      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034c8:	2320      	movs	r3, #32
 80034ca:	e00e      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034cc:	2310      	movs	r3, #16
 80034ce:	e00c      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034d0:	230c      	movs	r3, #12
 80034d2:	e00a      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034d4:	230a      	movs	r3, #10
 80034d6:	e008      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034d8:	2308      	movs	r3, #8
 80034da:	e006      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034dc:	2306      	movs	r3, #6
 80034de:	e004      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034e0:	2304      	movs	r3, #4
 80034e2:	e002      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e000      	b.n	80034ea <UART_SetConfig+0xc8a>
 80034e8:	2301      	movs	r3, #1
 80034ea:	0019      	movs	r1, r3
 80034ec:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80034ee:	f7fc fe09 	bl	8000104 <__udivsi3>
 80034f2:	0003      	movs	r3, r0
 80034f4:	005a      	lsls	r2, r3, #1
 80034f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	18d2      	adds	r2, r2, r3
 80034fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0019      	movs	r1, r3
 8003504:	0010      	movs	r0, r2
 8003506:	f7fc fdfd 	bl	8000104 <__udivsi3>
 800350a:	0003      	movs	r3, r0
 800350c:	b29b      	uxth	r3, r3
 800350e:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003510:	e068      	b.n	80035e4 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04c      	beq.n	80035b4 <UART_SetConfig+0xd54>
 800351a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	2b01      	cmp	r3, #1
 8003520:	d045      	beq.n	80035ae <UART_SetConfig+0xd4e>
 8003522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2b02      	cmp	r3, #2
 8003528:	d03e      	beq.n	80035a8 <UART_SetConfig+0xd48>
 800352a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	2b03      	cmp	r3, #3
 8003530:	d038      	beq.n	80035a4 <UART_SetConfig+0xd44>
 8003532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	2b04      	cmp	r3, #4
 8003538:	d031      	beq.n	800359e <UART_SetConfig+0xd3e>
 800353a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2b05      	cmp	r3, #5
 8003540:	d02b      	beq.n	800359a <UART_SetConfig+0xd3a>
 8003542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b06      	cmp	r3, #6
 8003548:	d025      	beq.n	8003596 <UART_SetConfig+0xd36>
 800354a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b07      	cmp	r3, #7
 8003550:	d01e      	beq.n	8003590 <UART_SetConfig+0xd30>
 8003552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b08      	cmp	r3, #8
 8003558:	d017      	beq.n	800358a <UART_SetConfig+0xd2a>
 800355a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b09      	cmp	r3, #9
 8003560:	d010      	beq.n	8003584 <UART_SetConfig+0xd24>
 8003562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b0a      	cmp	r3, #10
 8003568:	d009      	beq.n	800357e <UART_SetConfig+0xd1e>
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b0b      	cmp	r3, #11
 8003570:	d102      	bne.n	8003578 <UART_SetConfig+0xd18>
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	e01f      	b.n	80035b8 <UART_SetConfig+0xd58>
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	025b      	lsls	r3, r3, #9
 800357c:	e01c      	b.n	80035b8 <UART_SetConfig+0xd58>
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	e019      	b.n	80035b8 <UART_SetConfig+0xd58>
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	e016      	b.n	80035b8 <UART_SetConfig+0xd58>
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	e013      	b.n	80035b8 <UART_SetConfig+0xd58>
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	015b      	lsls	r3, r3, #5
 8003594:	e010      	b.n	80035b8 <UART_SetConfig+0xd58>
 8003596:	4b61      	ldr	r3, [pc, #388]	; (800371c <UART_SetConfig+0xebc>)
 8003598:	e00e      	b.n	80035b8 <UART_SetConfig+0xd58>
 800359a:	4b61      	ldr	r3, [pc, #388]	; (8003720 <UART_SetConfig+0xec0>)
 800359c:	e00c      	b.n	80035b8 <UART_SetConfig+0xd58>
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	e009      	b.n	80035b8 <UART_SetConfig+0xd58>
 80035a4:	4b5f      	ldr	r3, [pc, #380]	; (8003724 <UART_SetConfig+0xec4>)
 80035a6:	e007      	b.n	80035b8 <UART_SetConfig+0xd58>
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	01db      	lsls	r3, r3, #7
 80035ac:	e004      	b.n	80035b8 <UART_SetConfig+0xd58>
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	e001      	b.n	80035b8 <UART_SetConfig+0xd58>
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	025b      	lsls	r3, r3, #9
 80035b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035ba:	6852      	ldr	r2, [r2, #4]
 80035bc:	0852      	lsrs	r2, r2, #1
 80035be:	189a      	adds	r2, r3, r2
 80035c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0019      	movs	r1, r3
 80035c6:	0010      	movs	r0, r2
 80035c8:	f7fc fd9c 	bl	8000104 <__udivsi3>
 80035cc:	0003      	movs	r3, r0
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80035d2:	e007      	b.n	80035e4 <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 80035d4:	231b      	movs	r3, #27
 80035d6:	2258      	movs	r2, #88	; 0x58
 80035d8:	4694      	mov	ip, r2
 80035da:	44bc      	add	ip, r7
 80035dc:	4463      	add	r3, ip
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
        break;
 80035e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e6:	2b0f      	cmp	r3, #15
 80035e8:	d920      	bls.n	800362c <UART_SetConfig+0xdcc>
 80035ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ec:	4a4e      	ldr	r2, [pc, #312]	; (8003728 <UART_SetConfig+0xec8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d81c      	bhi.n	800362c <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	200e      	movs	r0, #14
 80035f8:	2458      	movs	r4, #88	; 0x58
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	181b      	adds	r3, r3, r0
 80035fe:	210f      	movs	r1, #15
 8003600:	438a      	bics	r2, r1
 8003602:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	b29b      	uxth	r3, r3
 800360a:	2207      	movs	r2, #7
 800360c:	4013      	ands	r3, r2
 800360e:	b299      	uxth	r1, r3
 8003610:	193b      	adds	r3, r7, r4
 8003612:	181b      	adds	r3, r3, r0
 8003614:	193a      	adds	r2, r7, r4
 8003616:	1812      	adds	r2, r2, r0
 8003618:	8812      	ldrh	r2, [r2, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800361e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	193a      	adds	r2, r7, r4
 8003624:	1812      	adds	r2, r2, r0
 8003626:	8812      	ldrh	r2, [r2, #0]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	e1d4      	b.n	80039d6 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 800362c:	231b      	movs	r3, #27
 800362e:	2258      	movs	r2, #88	; 0x58
 8003630:	4694      	mov	ip, r2
 8003632:	44bc      	add	ip, r7
 8003634:	4463      	add	r3, ip
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e1cc      	b.n	80039d6 <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 800363c:	2323      	movs	r3, #35	; 0x23
 800363e:	2258      	movs	r2, #88	; 0x58
 8003640:	4694      	mov	ip, r2
 8003642:	44bc      	add	ip, r7
 8003644:	4463      	add	r3, ip
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d100      	bne.n	800364e <UART_SetConfig+0xdee>
 800364c:	e08f      	b.n	800376e <UART_SetConfig+0xf0e>
 800364e:	dc02      	bgt.n	8003656 <UART_SetConfig+0xdf6>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <UART_SetConfig+0xe04>
 8003654:	e1a4      	b.n	80039a0 <UART_SetConfig+0x1140>
 8003656:	2b04      	cmp	r3, #4
 8003658:	d100      	bne.n	800365c <UART_SetConfig+0xdfc>
 800365a:	e0df      	b.n	800381c <UART_SetConfig+0xfbc>
 800365c:	2b08      	cmp	r3, #8
 800365e:	d100      	bne.n	8003662 <UART_SetConfig+0xe02>
 8003660:	e13e      	b.n	80038e0 <UART_SetConfig+0x1080>
 8003662:	e19d      	b.n	80039a0 <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003664:	f7fe fbaa 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8003668:	0003      	movs	r3, r0
 800366a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800366c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	d100      	bne.n	8003676 <UART_SetConfig+0xe16>
 8003674:	e066      	b.n	8003744 <UART_SetConfig+0xee4>
 8003676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b01      	cmp	r3, #1
 800367c:	d100      	bne.n	8003680 <UART_SetConfig+0xe20>
 800367e:	e05f      	b.n	8003740 <UART_SetConfig+0xee0>
 8003680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2b02      	cmp	r3, #2
 8003686:	d059      	beq.n	800373c <UART_SetConfig+0xedc>
 8003688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	2b03      	cmp	r3, #3
 800368e:	d053      	beq.n	8003738 <UART_SetConfig+0xed8>
 8003690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2b04      	cmp	r3, #4
 8003696:	d04d      	beq.n	8003734 <UART_SetConfig+0xed4>
 8003698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2b05      	cmp	r3, #5
 800369e:	d047      	beq.n	8003730 <UART_SetConfig+0xed0>
 80036a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2b06      	cmp	r3, #6
 80036a6:	d041      	beq.n	800372c <UART_SetConfig+0xecc>
 80036a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b07      	cmp	r3, #7
 80036ae:	d01a      	beq.n	80036e6 <UART_SetConfig+0xe86>
 80036b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d014      	beq.n	80036e2 <UART_SetConfig+0xe82>
 80036b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	2b09      	cmp	r3, #9
 80036be:	d00e      	beq.n	80036de <UART_SetConfig+0xe7e>
 80036c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2b0a      	cmp	r3, #10
 80036c6:	d008      	beq.n	80036da <UART_SetConfig+0xe7a>
 80036c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2b0b      	cmp	r3, #11
 80036ce:	d102      	bne.n	80036d6 <UART_SetConfig+0xe76>
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	e037      	b.n	8003746 <UART_SetConfig+0xee6>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e035      	b.n	8003746 <UART_SetConfig+0xee6>
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	e033      	b.n	8003746 <UART_SetConfig+0xee6>
 80036de:	2340      	movs	r3, #64	; 0x40
 80036e0:	e031      	b.n	8003746 <UART_SetConfig+0xee6>
 80036e2:	2320      	movs	r3, #32
 80036e4:	e02f      	b.n	8003746 <UART_SetConfig+0xee6>
 80036e6:	2310      	movs	r3, #16
 80036e8:	e02d      	b.n	8003746 <UART_SetConfig+0xee6>
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	0001e848 	.word	0x0001e848
 80036f0:	01e84800 	.word	0x01e84800
 80036f4:	0003d090 	.word	0x0003d090
 80036f8:	0007a120 	.word	0x0007a120
 80036fc:	000f4240 	.word	0x000f4240
 8003700:	001e8480 	.word	0x001e8480
 8003704:	0028b0aa 	.word	0x0028b0aa
 8003708:	0030d400 	.word	0x0030d400
 800370c:	003d0900 	.word	0x003d0900
 8003710:	00516154 	.word	0x00516154
 8003714:	007a1200 	.word	0x007a1200
 8003718:	00f42400 	.word	0x00f42400
 800371c:	00001554 	.word	0x00001554
 8003720:	00001998 	.word	0x00001998
 8003724:	00002aaa 	.word	0x00002aaa
 8003728:	0000ffff 	.word	0x0000ffff
 800372c:	230c      	movs	r3, #12
 800372e:	e00a      	b.n	8003746 <UART_SetConfig+0xee6>
 8003730:	230a      	movs	r3, #10
 8003732:	e008      	b.n	8003746 <UART_SetConfig+0xee6>
 8003734:	2308      	movs	r3, #8
 8003736:	e006      	b.n	8003746 <UART_SetConfig+0xee6>
 8003738:	2306      	movs	r3, #6
 800373a:	e004      	b.n	8003746 <UART_SetConfig+0xee6>
 800373c:	2304      	movs	r3, #4
 800373e:	e002      	b.n	8003746 <UART_SetConfig+0xee6>
 8003740:	2302      	movs	r3, #2
 8003742:	e000      	b.n	8003746 <UART_SetConfig+0xee6>
 8003744:	2301      	movs	r3, #1
 8003746:	0019      	movs	r1, r3
 8003748:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800374a:	f7fc fcdb 	bl	8000104 <__udivsi3>
 800374e:	0003      	movs	r3, r0
 8003750:	001a      	movs	r2, r3
 8003752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	18d2      	adds	r2, r2, r3
 800375a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	0019      	movs	r1, r3
 8003760:	0010      	movs	r0, r2
 8003762:	f7fc fccf 	bl	8000104 <__udivsi3>
 8003766:	0003      	movs	r3, r0
 8003768:	b29b      	uxth	r3, r3
 800376a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800376c:	e120      	b.n	80039b0 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800376e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	d043      	beq.n	80037fe <UART_SetConfig+0xf9e>
 8003776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b01      	cmp	r3, #1
 800377c:	d03d      	beq.n	80037fa <UART_SetConfig+0xf9a>
 800377e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b02      	cmp	r3, #2
 8003784:	d037      	beq.n	80037f6 <UART_SetConfig+0xf96>
 8003786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b03      	cmp	r3, #3
 800378c:	d031      	beq.n	80037f2 <UART_SetConfig+0xf92>
 800378e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b04      	cmp	r3, #4
 8003794:	d02b      	beq.n	80037ee <UART_SetConfig+0xf8e>
 8003796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b05      	cmp	r3, #5
 800379c:	d025      	beq.n	80037ea <UART_SetConfig+0xf8a>
 800379e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d01f      	beq.n	80037e6 <UART_SetConfig+0xf86>
 80037a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b07      	cmp	r3, #7
 80037ac:	d019      	beq.n	80037e2 <UART_SetConfig+0xf82>
 80037ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d013      	beq.n	80037de <UART_SetConfig+0xf7e>
 80037b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2b09      	cmp	r3, #9
 80037bc:	d00d      	beq.n	80037da <UART_SetConfig+0xf7a>
 80037be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b0a      	cmp	r3, #10
 80037c4:	d007      	beq.n	80037d6 <UART_SetConfig+0xf76>
 80037c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2b0b      	cmp	r3, #11
 80037cc:	d101      	bne.n	80037d2 <UART_SetConfig+0xf72>
 80037ce:	4b8e      	ldr	r3, [pc, #568]	; (8003a08 <UART_SetConfig+0x11a8>)
 80037d0:	e016      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037d2:	4b8e      	ldr	r3, [pc, #568]	; (8003a0c <UART_SetConfig+0x11ac>)
 80037d4:	e014      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037d6:	4b8e      	ldr	r3, [pc, #568]	; (8003a10 <UART_SetConfig+0x11b0>)
 80037d8:	e012      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037da:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <UART_SetConfig+0x11b4>)
 80037dc:	e010      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037de:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <UART_SetConfig+0x11b8>)
 80037e0:	e00e      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037e2:	4b8e      	ldr	r3, [pc, #568]	; (8003a1c <UART_SetConfig+0x11bc>)
 80037e4:	e00c      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037e6:	4b8e      	ldr	r3, [pc, #568]	; (8003a20 <UART_SetConfig+0x11c0>)
 80037e8:	e00a      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037ea:	4b8e      	ldr	r3, [pc, #568]	; (8003a24 <UART_SetConfig+0x11c4>)
 80037ec:	e008      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037ee:	4b8e      	ldr	r3, [pc, #568]	; (8003a28 <UART_SetConfig+0x11c8>)
 80037f0:	e006      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037f2:	4b8e      	ldr	r3, [pc, #568]	; (8003a2c <UART_SetConfig+0x11cc>)
 80037f4:	e004      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037f6:	4b8e      	ldr	r3, [pc, #568]	; (8003a30 <UART_SetConfig+0x11d0>)
 80037f8:	e002      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037fa:	4b8e      	ldr	r3, [pc, #568]	; (8003a34 <UART_SetConfig+0x11d4>)
 80037fc:	e000      	b.n	8003800 <UART_SetConfig+0xfa0>
 80037fe:	4b83      	ldr	r3, [pc, #524]	; (8003a0c <UART_SetConfig+0x11ac>)
 8003800:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003802:	6852      	ldr	r2, [r2, #4]
 8003804:	0852      	lsrs	r2, r2, #1
 8003806:	189a      	adds	r2, r3, r2
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0019      	movs	r1, r3
 800380e:	0010      	movs	r0, r2
 8003810:	f7fc fc78 	bl	8000104 <__udivsi3>
 8003814:	0003      	movs	r3, r0
 8003816:	b29b      	uxth	r3, r3
 8003818:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800381a:	e0c9      	b.n	80039b0 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381c:	f7fe fa42 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003820:	0003      	movs	r3, r0
 8003822:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d044      	beq.n	80038b6 <UART_SetConfig+0x1056>
 800382c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	2b01      	cmp	r3, #1
 8003832:	d03e      	beq.n	80038b2 <UART_SetConfig+0x1052>
 8003834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b02      	cmp	r3, #2
 800383a:	d038      	beq.n	80038ae <UART_SetConfig+0x104e>
 800383c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2b03      	cmp	r3, #3
 8003842:	d032      	beq.n	80038aa <UART_SetConfig+0x104a>
 8003844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b04      	cmp	r3, #4
 800384a:	d02c      	beq.n	80038a6 <UART_SetConfig+0x1046>
 800384c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2b05      	cmp	r3, #5
 8003852:	d026      	beq.n	80038a2 <UART_SetConfig+0x1042>
 8003854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b06      	cmp	r3, #6
 800385a:	d020      	beq.n	800389e <UART_SetConfig+0x103e>
 800385c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	2b07      	cmp	r3, #7
 8003862:	d01a      	beq.n	800389a <UART_SetConfig+0x103a>
 8003864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	2b08      	cmp	r3, #8
 800386a:	d014      	beq.n	8003896 <UART_SetConfig+0x1036>
 800386c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b09      	cmp	r3, #9
 8003872:	d00e      	beq.n	8003892 <UART_SetConfig+0x1032>
 8003874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b0a      	cmp	r3, #10
 800387a:	d008      	beq.n	800388e <UART_SetConfig+0x102e>
 800387c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2b0b      	cmp	r3, #11
 8003882:	d102      	bne.n	800388a <UART_SetConfig+0x102a>
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	e016      	b.n	80038b8 <UART_SetConfig+0x1058>
 800388a:	2301      	movs	r3, #1
 800388c:	e014      	b.n	80038b8 <UART_SetConfig+0x1058>
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	e012      	b.n	80038b8 <UART_SetConfig+0x1058>
 8003892:	2340      	movs	r3, #64	; 0x40
 8003894:	e010      	b.n	80038b8 <UART_SetConfig+0x1058>
 8003896:	2320      	movs	r3, #32
 8003898:	e00e      	b.n	80038b8 <UART_SetConfig+0x1058>
 800389a:	2310      	movs	r3, #16
 800389c:	e00c      	b.n	80038b8 <UART_SetConfig+0x1058>
 800389e:	230c      	movs	r3, #12
 80038a0:	e00a      	b.n	80038b8 <UART_SetConfig+0x1058>
 80038a2:	230a      	movs	r3, #10
 80038a4:	e008      	b.n	80038b8 <UART_SetConfig+0x1058>
 80038a6:	2308      	movs	r3, #8
 80038a8:	e006      	b.n	80038b8 <UART_SetConfig+0x1058>
 80038aa:	2306      	movs	r3, #6
 80038ac:	e004      	b.n	80038b8 <UART_SetConfig+0x1058>
 80038ae:	2304      	movs	r3, #4
 80038b0:	e002      	b.n	80038b8 <UART_SetConfig+0x1058>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e000      	b.n	80038b8 <UART_SetConfig+0x1058>
 80038b6:	2301      	movs	r3, #1
 80038b8:	0019      	movs	r1, r3
 80038ba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80038bc:	f7fc fc22 	bl	8000104 <__udivsi3>
 80038c0:	0003      	movs	r3, r0
 80038c2:	001a      	movs	r2, r3
 80038c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	18d2      	adds	r2, r2, r3
 80038cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0019      	movs	r1, r3
 80038d2:	0010      	movs	r0, r2
 80038d4:	f7fc fc16 	bl	8000104 <__udivsi3>
 80038d8:	0003      	movs	r3, r0
 80038da:	b29b      	uxth	r3, r3
 80038dc:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80038de:	e067      	b.n	80039b0 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d04b      	beq.n	8003980 <UART_SetConfig+0x1120>
 80038e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d044      	beq.n	800397a <UART_SetConfig+0x111a>
 80038f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d03d      	beq.n	8003974 <UART_SetConfig+0x1114>
 80038f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d037      	beq.n	8003970 <UART_SetConfig+0x1110>
 8003900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b04      	cmp	r3, #4
 8003906:	d030      	beq.n	800396a <UART_SetConfig+0x110a>
 8003908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2b05      	cmp	r3, #5
 800390e:	d02a      	beq.n	8003966 <UART_SetConfig+0x1106>
 8003910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2b06      	cmp	r3, #6
 8003916:	d024      	beq.n	8003962 <UART_SetConfig+0x1102>
 8003918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2b07      	cmp	r3, #7
 800391e:	d01d      	beq.n	800395c <UART_SetConfig+0x10fc>
 8003920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b08      	cmp	r3, #8
 8003926:	d016      	beq.n	8003956 <UART_SetConfig+0x10f6>
 8003928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	2b09      	cmp	r3, #9
 800392e:	d00f      	beq.n	8003950 <UART_SetConfig+0x10f0>
 8003930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b0a      	cmp	r3, #10
 8003936:	d008      	beq.n	800394a <UART_SetConfig+0x10ea>
 8003938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	2b0b      	cmp	r3, #11
 800393e:	d101      	bne.n	8003944 <UART_SetConfig+0x10e4>
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	e01f      	b.n	8003984 <UART_SetConfig+0x1124>
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	e01c      	b.n	8003984 <UART_SetConfig+0x1124>
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	e019      	b.n	8003984 <UART_SetConfig+0x1124>
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	e016      	b.n	8003984 <UART_SetConfig+0x1124>
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	e013      	b.n	8003984 <UART_SetConfig+0x1124>
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	e010      	b.n	8003984 <UART_SetConfig+0x1124>
 8003962:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <UART_SetConfig+0x11d8>)
 8003964:	e00e      	b.n	8003984 <UART_SetConfig+0x1124>
 8003966:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <UART_SetConfig+0x11dc>)
 8003968:	e00c      	b.n	8003984 <UART_SetConfig+0x1124>
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	015b      	lsls	r3, r3, #5
 800396e:	e009      	b.n	8003984 <UART_SetConfig+0x1124>
 8003970:	4b33      	ldr	r3, [pc, #204]	; (8003a40 <UART_SetConfig+0x11e0>)
 8003972:	e007      	b.n	8003984 <UART_SetConfig+0x1124>
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	019b      	lsls	r3, r3, #6
 8003978:	e004      	b.n	8003984 <UART_SetConfig+0x1124>
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	01db      	lsls	r3, r3, #7
 800397e:	e001      	b.n	8003984 <UART_SetConfig+0x1124>
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	021b      	lsls	r3, r3, #8
 8003984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003986:	6852      	ldr	r2, [r2, #4]
 8003988:	0852      	lsrs	r2, r2, #1
 800398a:	189a      	adds	r2, r3, r2
 800398c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	0019      	movs	r1, r3
 8003992:	0010      	movs	r0, r2
 8003994:	f7fc fbb6 	bl	8000104 <__udivsi3>
 8003998:	0003      	movs	r3, r0
 800399a:	b29b      	uxth	r3, r3
 800399c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800399e:	e007      	b.n	80039b0 <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 80039a0:	231b      	movs	r3, #27
 80039a2:	2258      	movs	r2, #88	; 0x58
 80039a4:	4694      	mov	ip, r2
 80039a6:	44bc      	add	ip, r7
 80039a8:	4463      	add	r3, ip
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
        break;
 80039ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	d908      	bls.n	80039c8 <UART_SetConfig+0x1168>
 80039b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b8:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <UART_SetConfig+0x11e4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d804      	bhi.n	80039c8 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 80039be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	e006      	b.n	80039d6 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 80039c8:	231b      	movs	r3, #27
 80039ca:	2258      	movs	r2, #88	; 0x58
 80039cc:	4694      	mov	ip, r2
 80039ce:	44bc      	add	ip, r7
 80039d0:	4463      	add	r3, ip
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d8:	226a      	movs	r2, #106	; 0x6a
 80039da:	2101      	movs	r1, #1
 80039dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80039de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e0:	2268      	movs	r2, #104	; 0x68
 80039e2:	2101      	movs	r1, #1
 80039e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e8:	2200      	movs	r2, #0
 80039ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80039ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ee:	2200      	movs	r2, #0
 80039f0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80039f2:	231b      	movs	r3, #27
 80039f4:	2258      	movs	r2, #88	; 0x58
 80039f6:	4694      	mov	ip, r2
 80039f8:	44bc      	add	ip, r7
 80039fa:	4463      	add	r3, ip
 80039fc:	781b      	ldrb	r3, [r3, #0]
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b021      	add	sp, #132	; 0x84
 8003a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	0000f424 	.word	0x0000f424
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	0001e848 	.word	0x0001e848
 8003a14:	0003d090 	.word	0x0003d090
 8003a18:	0007a120 	.word	0x0007a120
 8003a1c:	000f4240 	.word	0x000f4240
 8003a20:	00145855 	.word	0x00145855
 8003a24:	00186a00 	.word	0x00186a00
 8003a28:	001e8480 	.word	0x001e8480
 8003a2c:	0028b0aa 	.word	0x0028b0aa
 8003a30:	003d0900 	.word	0x003d0900
 8003a34:	007a1200 	.word	0x007a1200
 8003a38:	00000aaa 	.word	0x00000aaa
 8003a3c:	00000ccc 	.word	0x00000ccc
 8003a40:	00001555 	.word	0x00001555
 8003a44:	0000ffff 	.word	0x0000ffff

08003a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <UART_AdvFeatureConfig+0x144>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	0019      	movs	r1, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	2202      	movs	r2, #2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4a43      	ldr	r2, [pc, #268]	; (8003b90 <UART_AdvFeatureConfig+0x148>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	2204      	movs	r2, #4
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a3b      	ldr	r2, [pc, #236]	; (8003b94 <UART_AdvFeatureConfig+0x14c>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	2208      	movs	r2, #8
 8003abc:	4013      	ands	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4a34      	ldr	r2, [pc, #208]	; (8003b98 <UART_AdvFeatureConfig+0x150>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	0019      	movs	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	2210      	movs	r2, #16
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <UART_AdvFeatureConfig+0x154>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	2220      	movs	r2, #32
 8003b00:	4013      	ands	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <UART_AdvFeatureConfig+0x158>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	2240      	movs	r2, #64	; 0x40
 8003b22:	4013      	ands	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <UART_AdvFeatureConfig+0x15c>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	035b      	lsls	r3, r3, #13
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d10b      	bne.n	8003b62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <UART_AdvFeatureConfig+0x160>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <UART_AdvFeatureConfig+0x164>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	fffdffff 	.word	0xfffdffff
 8003b90:	fffeffff 	.word	0xfffeffff
 8003b94:	fffbffff 	.word	0xfffbffff
 8003b98:	ffff7fff 	.word	0xffff7fff
 8003b9c:	ffffefff 	.word	0xffffefff
 8003ba0:	ffffdfff 	.word	0xffffdfff
 8003ba4:	ffefffff 	.word	0xffefffff
 8003ba8:	ff9fffff 	.word	0xff9fffff
 8003bac:	fff7ffff 	.word	0xfff7ffff

08003bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2288      	movs	r2, #136	; 0x88
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003bc0:	f7fd f99a 	bl	8000ef8 <HAL_GetTick>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2208      	movs	r2, #8
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d10d      	bne.n	8003bf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	0399      	lsls	r1, r3, #14
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <UART_CheckIdleState+0x90>)
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	0013      	movs	r3, r2
 8003be4:	2200      	movs	r2, #0
 8003be6:	f000 f82d 	bl	8003c44 <UART_WaitOnFlagUntilTimeout>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d001      	beq.n	8003bf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e021      	b.n	8003c36 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d10d      	bne.n	8003c1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	2380      	movs	r3, #128	; 0x80
 8003c04:	03d9      	lsls	r1, r3, #15
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <UART_CheckIdleState+0x90>)
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0013      	movs	r3, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f000 f818 	bl	8003c44 <UART_WaitOnFlagUntilTimeout>
 8003c14:	1e03      	subs	r3, r0, #0
 8003c16:	d001      	beq.n	8003c1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e00c      	b.n	8003c36 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	2120      	movs	r1, #32
 8003c22:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2284      	movs	r2, #132	; 0x84
 8003c28:	2120      	movs	r1, #32
 8003c2a:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	227c      	movs	r2, #124	; 0x7c
 8003c30:	2100      	movs	r1, #0
 8003c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	01ffffff 	.word	0x01ffffff

08003c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c54:	e02b      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	d028      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5c:	f7fd f94c 	bl	8000ef8 <HAL_GetTick>
 8003c60:	0002      	movs	r2, r0
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d302      	bcc.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11d      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4916      	ldr	r1, [pc, #88]	; (8003cd8 <UART_WaitOnFlagUntilTimeout+0x94>)
 8003c7e:	400a      	ands	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	438a      	bics	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	2120      	movs	r1, #32
 8003c98:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2284      	movs	r2, #132	; 0x84
 8003c9e:	2120      	movs	r1, #32
 8003ca0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	227c      	movs	r2, #124	; 0x7c
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e00f      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	425a      	negs	r2, r3
 8003cbe:	4153      	adcs	r3, r2
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	1dfb      	adds	r3, r7, #7
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d0c4      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b004      	add	sp, #16
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	fffffe5f 	.word	0xfffffe5f

08003cdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	227c      	movs	r2, #124	; 0x7c
 8003ce8:	5c9b      	ldrb	r3, [r3, r2]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e027      	b.n	8003d42 <HAL_UARTEx_DisableFifoMode+0x66>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	227c      	movs	r2, #124	; 0x7c
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	2124      	movs	r1, #36	; 0x24
 8003d00:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	438a      	bics	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	2120      	movs	r1, #32
 8003d36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	227c      	movs	r2, #124	; 0x7c
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b004      	add	sp, #16
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	dfffffff 	.word	0xdfffffff

08003d50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	227c      	movs	r2, #124	; 0x7c
 8003d5e:	5c9b      	ldrb	r3, [r3, r2]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e02e      	b.n	8003dc6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	227c      	movs	r2, #124	; 0x7c
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	2124      	movs	r1, #36	; 0x24
 8003d76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	438a      	bics	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	08d9      	lsrs	r1, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 f854 	bl	8003e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	2120      	movs	r1, #32
 8003dba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	227c      	movs	r2, #124	; 0x7c
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	227c      	movs	r2, #124	; 0x7c
 8003dde:	5c9b      	ldrb	r3, [r3, r2]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e02f      	b.n	8003e48 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	227c      	movs	r2, #124	; 0x7c
 8003dec:	2101      	movs	r1, #1
 8003dee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	2124      	movs	r1, #36	; 0x24
 8003df6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 f813 	bl	8003e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	2120      	movs	r1, #32
 8003e3c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	227c      	movs	r2, #124	; 0x7c
 8003e42:	2100      	movs	r1, #0
 8003e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b004      	add	sp, #16
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	f1ffffff 	.word	0xf1ffffff

08003e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	b089      	sub	sp, #36	; 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003e5c:	2314      	movs	r3, #20
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <UARTEx_SetNbDataToProcess+0xcc>)
 8003e62:	ca03      	ldmia	r2!, {r0, r1}
 8003e64:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003e66:	230c      	movs	r3, #12
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	4a2e      	ldr	r2, [pc, #184]	; (8003f24 <UARTEx_SetNbDataToProcess+0xd0>)
 8003e6c:	ca03      	ldmia	r2!, {r0, r1}
 8003e6e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d108      	bne.n	8003e8a <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	226a      	movs	r2, #106	; 0x6a
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2268      	movs	r2, #104	; 0x68
 8003e84:	2101      	movs	r1, #1
 8003e86:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e88:	e046      	b.n	8003f18 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e8a:	261f      	movs	r6, #31
 8003e8c:	19bb      	adds	r3, r7, r6
 8003e8e:	2208      	movs	r2, #8
 8003e90:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e92:	201e      	movs	r0, #30
 8003e94:	183b      	adds	r3, r7, r0
 8003e96:	2208      	movs	r2, #8
 8003e98:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	0e5b      	lsrs	r3, r3, #25
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	241d      	movs	r4, #29
 8003ea6:	193b      	adds	r3, r7, r4
 8003ea8:	2107      	movs	r1, #7
 8003eaa:	400a      	ands	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	0f5b      	lsrs	r3, r3, #29
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	251c      	movs	r5, #28
 8003eba:	197b      	adds	r3, r7, r5
 8003ebc:	2107      	movs	r1, #7
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003ec2:	183b      	adds	r3, r7, r0
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	197a      	adds	r2, r7, r5
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	2114      	movs	r1, #20
 8003ecc:	1879      	adds	r1, r7, r1
 8003ece:	5c8a      	ldrb	r2, [r1, r2]
 8003ed0:	435a      	muls	r2, r3
 8003ed2:	0010      	movs	r0, r2
 8003ed4:	197b      	adds	r3, r7, r5
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	250c      	movs	r5, #12
 8003eda:	197a      	adds	r2, r7, r5
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	0019      	movs	r1, r3
 8003ee0:	f7fc f99a 	bl	8000218 <__divsi3>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	b299      	uxth	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	226a      	movs	r2, #106	; 0x6a
 8003eec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003eee:	19bb      	adds	r3, r7, r6
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	193a      	adds	r2, r7, r4
 8003ef4:	7812      	ldrb	r2, [r2, #0]
 8003ef6:	2114      	movs	r1, #20
 8003ef8:	1879      	adds	r1, r7, r1
 8003efa:	5c8a      	ldrb	r2, [r1, r2]
 8003efc:	435a      	muls	r2, r3
 8003efe:	0010      	movs	r0, r2
 8003f00:	193b      	adds	r3, r7, r4
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	197a      	adds	r2, r7, r5
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	0019      	movs	r1, r3
 8003f0a:	f7fc f985 	bl	8000218 <__divsi3>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	b299      	uxth	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2268      	movs	r2, #104	; 0x68
 8003f16:	5299      	strh	r1, [r3, r2]
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b009      	add	sp, #36	; 0x24
 8003f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f20:	08003fb4 	.word	0x08003fb4
 8003f24:	08003fbc 	.word	0x08003fbc

08003f28 <__libc_init_array>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	2600      	movs	r6, #0
 8003f2c:	4d0c      	ldr	r5, [pc, #48]	; (8003f60 <__libc_init_array+0x38>)
 8003f2e:	4c0d      	ldr	r4, [pc, #52]	; (8003f64 <__libc_init_array+0x3c>)
 8003f30:	1b64      	subs	r4, r4, r5
 8003f32:	10a4      	asrs	r4, r4, #2
 8003f34:	42a6      	cmp	r6, r4
 8003f36:	d109      	bne.n	8003f4c <__libc_init_array+0x24>
 8003f38:	2600      	movs	r6, #0
 8003f3a:	f000 f821 	bl	8003f80 <_init>
 8003f3e:	4d0a      	ldr	r5, [pc, #40]	; (8003f68 <__libc_init_array+0x40>)
 8003f40:	4c0a      	ldr	r4, [pc, #40]	; (8003f6c <__libc_init_array+0x44>)
 8003f42:	1b64      	subs	r4, r4, r5
 8003f44:	10a4      	asrs	r4, r4, #2
 8003f46:	42a6      	cmp	r6, r4
 8003f48:	d105      	bne.n	8003f56 <__libc_init_array+0x2e>
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	00b3      	lsls	r3, r6, #2
 8003f4e:	58eb      	ldr	r3, [r5, r3]
 8003f50:	4798      	blx	r3
 8003f52:	3601      	adds	r6, #1
 8003f54:	e7ee      	b.n	8003f34 <__libc_init_array+0xc>
 8003f56:	00b3      	lsls	r3, r6, #2
 8003f58:	58eb      	ldr	r3, [r5, r3]
 8003f5a:	4798      	blx	r3
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	e7f2      	b.n	8003f46 <__libc_init_array+0x1e>
 8003f60:	0800402c 	.word	0x0800402c
 8003f64:	0800402c 	.word	0x0800402c
 8003f68:	0800402c 	.word	0x0800402c
 8003f6c:	08004030 	.word	0x08004030

08003f70 <memset>:
 8003f70:	0003      	movs	r3, r0
 8003f72:	1812      	adds	r2, r2, r0
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d100      	bne.n	8003f7a <memset+0xa>
 8003f78:	4770      	bx	lr
 8003f7a:	7019      	strb	r1, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	e7f9      	b.n	8003f74 <memset+0x4>

08003f80 <_init>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f86:	bc08      	pop	{r3}
 8003f88:	469e      	mov	lr, r3
 8003f8a:	4770      	bx	lr

08003f8c <_fini>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr
